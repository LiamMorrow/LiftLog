// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using RevenueCat.Client.Models;
using RevenueCat.Client.Projects.Item.Apps.Item.Public_api_keys;
using RevenueCat.Client.Projects.Item.Apps.Item.Store_kit_config;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace RevenueCat.Client.Projects.Item.Apps.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \projects\{project_id}\apps\{app_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithApp_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The public_api_keys property</summary>
        public global::RevenueCat.Client.Projects.Item.Apps.Item.Public_api_keys.Public_api_keysRequestBuilder Public_api_keys
        {
            get => new global::RevenueCat.Client.Projects.Item.Apps.Item.Public_api_keys.Public_api_keysRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The store_kit_config property</summary>
        public global::RevenueCat.Client.Projects.Item.Apps.Item.Store_kit_config.Store_kit_configRequestBuilder Store_kit_config
        {
            get => new global::RevenueCat.Client.Projects.Item.Apps.Item.Store_kit_config.Store_kit_configRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithApp_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{project_id}/apps/{app_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithApp_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{project_id}/apps/{app_id}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;project_configuration:apps:read_write&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Models.DeletedObject"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject409Error">When receiving a 409 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject422Error">When receiving a 422 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject423Error">When receiving a 423 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject429Error">When receiving a 429 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.DeletedObject503Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::RevenueCat.Client.Models.DeletedObject?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::RevenueCat.Client.Models.DeletedObject> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::RevenueCat.Client.Models.DeletedObject400Error.CreateFromDiscriminatorValue },
                { "401", global::RevenueCat.Client.Models.DeletedObject401Error.CreateFromDiscriminatorValue },
                { "403", global::RevenueCat.Client.Models.DeletedObject403Error.CreateFromDiscriminatorValue },
                { "404", global::RevenueCat.Client.Models.DeletedObject404Error.CreateFromDiscriminatorValue },
                { "409", global::RevenueCat.Client.Models.DeletedObject409Error.CreateFromDiscriminatorValue },
                { "422", global::RevenueCat.Client.Models.DeletedObject422Error.CreateFromDiscriminatorValue },
                { "423", global::RevenueCat.Client.Models.DeletedObject423Error.CreateFromDiscriminatorValue },
                { "429", global::RevenueCat.Client.Models.DeletedObject429Error.CreateFromDiscriminatorValue },
                { "500", global::RevenueCat.Client.Models.DeletedObject500Error.CreateFromDiscriminatorValue },
                { "503", global::RevenueCat.Client.Models.DeletedObject503Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::RevenueCat.Client.Models.DeletedObject>(requestInfo, global::RevenueCat.Client.Models.DeletedObject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;project_configuration:apps:read&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Models.App"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::RevenueCat.Client.Models.App400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App423Error">When receiving a 423 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App429Error">When receiving a 429 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App503Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::RevenueCat.Client.Models.App?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::RevenueCat.Client.Models.App> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::RevenueCat.Client.Models.App400Error.CreateFromDiscriminatorValue },
                { "401", global::RevenueCat.Client.Models.App401Error.CreateFromDiscriminatorValue },
                { "403", global::RevenueCat.Client.Models.App403Error.CreateFromDiscriminatorValue },
                { "404", global::RevenueCat.Client.Models.App404Error.CreateFromDiscriminatorValue },
                { "423", global::RevenueCat.Client.Models.App423Error.CreateFromDiscriminatorValue },
                { "429", global::RevenueCat.Client.Models.App429Error.CreateFromDiscriminatorValue },
                { "500", global::RevenueCat.Client.Models.App500Error.CreateFromDiscriminatorValue },
                { "503", global::RevenueCat.Client.Models.App503Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::RevenueCat.Client.Models.App>(requestInfo, global::RevenueCat.Client.Models.App.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;project_configuration:apps:read_write&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Models.App"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::RevenueCat.Client.Models.App400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App409Error">When receiving a 409 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App422Error">When receiving a 422 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App423Error">When receiving a 423 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App429Error">When receiving a 429 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.App503Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::RevenueCat.Client.Models.App?> PostAsync(global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_PostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::RevenueCat.Client.Models.App> PostAsync(global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_PostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::RevenueCat.Client.Models.App400Error.CreateFromDiscriminatorValue },
                { "401", global::RevenueCat.Client.Models.App401Error.CreateFromDiscriminatorValue },
                { "403", global::RevenueCat.Client.Models.App403Error.CreateFromDiscriminatorValue },
                { "404", global::RevenueCat.Client.Models.App404Error.CreateFromDiscriminatorValue },
                { "409", global::RevenueCat.Client.Models.App409Error.CreateFromDiscriminatorValue },
                { "422", global::RevenueCat.Client.Models.App422Error.CreateFromDiscriminatorValue },
                { "423", global::RevenueCat.Client.Models.App423Error.CreateFromDiscriminatorValue },
                { "429", global::RevenueCat.Client.Models.App429Error.CreateFromDiscriminatorValue },
                { "500", global::RevenueCat.Client.Models.App500Error.CreateFromDiscriminatorValue },
                { "503", global::RevenueCat.Client.Models.App503Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::RevenueCat.Client.Models.App>(requestInfo, global::RevenueCat.Client.Models.App.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;project_configuration:apps:read_write&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;project_configuration:apps:read&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;project_configuration:apps:read_write&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_PostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_PostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
