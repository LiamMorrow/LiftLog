// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using RevenueCat.Client.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements
{
    /// <summary>
    /// Builds and executes requests for operations under \projects\{project_id}\subscriptions\{subscription_id}\entitlements
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EntitlementsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EntitlementsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{project_id}/subscriptions/{subscription_id}/entitlements{?limit*,starting_after*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EntitlementsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{project_id}/subscriptions/{subscription_id}/entitlements{?limit*,starting_after*}", rawUrl)
        {
        }
        /// <summary>
        /// Lists all Entitlements granted by a Subscription. This endpoint requires the following permission(s): &lt;code&gt;customer_information:subscriptions:read&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Models.ListEntitlements"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::RevenueCat.Client.Models.ListEntitlements400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListEntitlements401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListEntitlements403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListEntitlements404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListEntitlements423Error">When receiving a 423 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListEntitlements429Error">When receiving a 429 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListEntitlements500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListEntitlements503Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::RevenueCat.Client.Models.ListEntitlements?> GetAsync(Action<RequestConfiguration<global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder.EntitlementsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::RevenueCat.Client.Models.ListEntitlements> GetAsync(Action<RequestConfiguration<global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder.EntitlementsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::RevenueCat.Client.Models.ListEntitlements400Error.CreateFromDiscriminatorValue },
                { "401", global::RevenueCat.Client.Models.ListEntitlements401Error.CreateFromDiscriminatorValue },
                { "403", global::RevenueCat.Client.Models.ListEntitlements403Error.CreateFromDiscriminatorValue },
                { "404", global::RevenueCat.Client.Models.ListEntitlements404Error.CreateFromDiscriminatorValue },
                { "423", global::RevenueCat.Client.Models.ListEntitlements423Error.CreateFromDiscriminatorValue },
                { "429", global::RevenueCat.Client.Models.ListEntitlements429Error.CreateFromDiscriminatorValue },
                { "500", global::RevenueCat.Client.Models.ListEntitlements500Error.CreateFromDiscriminatorValue },
                { "503", global::RevenueCat.Client.Models.ListEntitlements503Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::RevenueCat.Client.Models.ListEntitlements>(requestInfo, global::RevenueCat.Client.Models.ListEntitlements.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists all Entitlements granted by a Subscription. This endpoint requires the following permission(s): &lt;code&gt;customer_information:subscriptions:read&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder.EntitlementsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder.EntitlementsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::RevenueCat.Client.Projects.Item.Subscriptions.Item.Entitlements.EntitlementsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Lists all Entitlements granted by a Subscription. This endpoint requires the following permission(s): &lt;code&gt;customer_information:subscriptions:read&lt;/code&gt;.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EntitlementsRequestBuilderGetQueryParameters 
        {
            [QueryParameter("limit")]
            public int? Limit { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("starting_after")]
            public string? StartingAfter { get; set; }
#nullable restore
#else
            [QueryParameter("starting_after")]
            public string StartingAfter { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
