// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using RevenueCat.Client.Models;
using RevenueCat.Client.Projects.Item.Customers.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace RevenueCat.Client.Projects.Item.Customers
{
    /// <summary>
    /// Builds and executes requests for operations under \projects\{project_id}\customers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CustomersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the RevenueCat.Client.projects.item.customers.item collection</summary>
        /// <param name="position">ID of the customer</param>
        /// <returns>A <see cref="global::RevenueCat.Client.Projects.Item.Customers.Item.WithCustomer_ItemRequestBuilder"/></returns>
        public global::RevenueCat.Client.Projects.Item.Customers.Item.WithCustomer_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("customer_id", position);
                return new global::RevenueCat.Client.Projects.Item.Customers.Item.WithCustomer_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CustomersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{project_id}/customers{?limit*,search*,starting_after*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CustomersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/projects/{project_id}/customers{?limit*,search*,starting_after*}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;customer_information:customers:read&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Models.ListCustomers"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::RevenueCat.Client.Models.ListCustomers400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListCustomers401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListCustomers403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListCustomers404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListCustomers423Error">When receiving a 423 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListCustomers429Error">When receiving a 429 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListCustomers500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.ListCustomers503Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::RevenueCat.Client.Models.ListCustomers?> GetAsync(Action<RequestConfiguration<global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder.CustomersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::RevenueCat.Client.Models.ListCustomers> GetAsync(Action<RequestConfiguration<global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder.CustomersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::RevenueCat.Client.Models.ListCustomers400Error.CreateFromDiscriminatorValue },
                { "401", global::RevenueCat.Client.Models.ListCustomers401Error.CreateFromDiscriminatorValue },
                { "403", global::RevenueCat.Client.Models.ListCustomers403Error.CreateFromDiscriminatorValue },
                { "404", global::RevenueCat.Client.Models.ListCustomers404Error.CreateFromDiscriminatorValue },
                { "423", global::RevenueCat.Client.Models.ListCustomers423Error.CreateFromDiscriminatorValue },
                { "429", global::RevenueCat.Client.Models.ListCustomers429Error.CreateFromDiscriminatorValue },
                { "500", global::RevenueCat.Client.Models.ListCustomers500Error.CreateFromDiscriminatorValue },
                { "503", global::RevenueCat.Client.Models.ListCustomers503Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::RevenueCat.Client.Models.ListCustomers>(requestInfo, global::RevenueCat.Client.Models.ListCustomers.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;customer_information:customers:read_write&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Models.Customer"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::RevenueCat.Client.Models.Customer400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer409Error">When receiving a 409 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer422Error">When receiving a 422 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer423Error">When receiving a 423 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer429Error">When receiving a 429 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::RevenueCat.Client.Models.Customer503Error">When receiving a 503 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::RevenueCat.Client.Models.Customer?> PostAsync(global::RevenueCat.Client.Projects.Item.Customers.CustomersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::RevenueCat.Client.Models.Customer> PostAsync(global::RevenueCat.Client.Projects.Item.Customers.CustomersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::RevenueCat.Client.Models.Customer400Error.CreateFromDiscriminatorValue },
                { "401", global::RevenueCat.Client.Models.Customer401Error.CreateFromDiscriminatorValue },
                { "403", global::RevenueCat.Client.Models.Customer403Error.CreateFromDiscriminatorValue },
                { "404", global::RevenueCat.Client.Models.Customer404Error.CreateFromDiscriminatorValue },
                { "409", global::RevenueCat.Client.Models.Customer409Error.CreateFromDiscriminatorValue },
                { "422", global::RevenueCat.Client.Models.Customer422Error.CreateFromDiscriminatorValue },
                { "423", global::RevenueCat.Client.Models.Customer423Error.CreateFromDiscriminatorValue },
                { "429", global::RevenueCat.Client.Models.Customer429Error.CreateFromDiscriminatorValue },
                { "500", global::RevenueCat.Client.Models.Customer500Error.CreateFromDiscriminatorValue },
                { "503", global::RevenueCat.Client.Models.Customer503Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::RevenueCat.Client.Models.Customer>(requestInfo, global::RevenueCat.Client.Models.Customer.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;customer_information:customers:read&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder.CustomersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder.CustomersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;customer_information:customers:read_write&lt;/code&gt;.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::RevenueCat.Client.Projects.Item.Customers.CustomersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::RevenueCat.Client.Projects.Item.Customers.CustomersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::RevenueCat.Client.Projects.Item.Customers.CustomersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// This endpoint requires the following permission(s): &lt;code&gt;customer_information:customers:read&lt;/code&gt;.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CustomersRequestBuilderGetQueryParameters 
        {
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Search term. Currently, only searching by email is supported (searching for exact matches in the $email attribute).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("starting_after")]
            public string? StartingAfter { get; set; }
#nullable restore
#else
            [QueryParameter("starting_after")]
            public string StartingAfter { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
