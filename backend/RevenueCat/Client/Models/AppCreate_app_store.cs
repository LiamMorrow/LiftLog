// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace RevenueCat.Client.Models
{
    /// <summary>
    /// App Store type details. Should only be used when type is app_store.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AppCreate_app_store : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bundle ID of the app</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BundleId { get; set; }
#nullable restore
#else
        public string BundleId { get; set; }
#endif
        /// <summary>The shared secret of the app</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SharedSecret { get; set; }
#nullable restore
#else
        public string SharedSecret { get; set; }
#endif
        /// <summary>In App Key id. The ID of the downloaded in app key. You can get it from App Store Connect</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionKeyId { get; set; }
#nullable restore
#else
        public string SubscriptionKeyId { get; set; }
#endif
        /// <summary>The key Issuer id. See instructions on how to obtain this in: https://www.revenuecat.com/docs/in-app-purchase-key-configuration#3-providing-the-issuer-id-to-revenuecat </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionKeyIssuer { get; set; }
#nullable restore
#else
        public string SubscriptionKeyIssuer { get; set; }
#endif
        /// <summary>PKCS /#8 In App Key downloaded from App Store Connect in PEM format. Copy the contentsof the file in this field. See instructions on how to get it in: https://www.revenuecat.com/docs/in-app-purchase-key-configuration</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionPrivateKey { get; set; }
#nullable restore
#else
        public string SubscriptionPrivateKey { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Models.AppCreate_app_store"/> and sets the default values.
        /// </summary>
        public AppCreate_app_store()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Models.AppCreate_app_store"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::RevenueCat.Client.Models.AppCreate_app_store CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::RevenueCat.Client.Models.AppCreate_app_store();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bundle_id", n => { BundleId = n.GetStringValue(); } },
                { "shared_secret", n => { SharedSecret = n.GetStringValue(); } },
                { "subscription_key_id", n => { SubscriptionKeyId = n.GetStringValue(); } },
                { "subscription_key_issuer", n => { SubscriptionKeyIssuer = n.GetStringValue(); } },
                { "subscription_private_key", n => { SubscriptionPrivateKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bundle_id", BundleId);
            writer.WriteStringValue("shared_secret", SharedSecret);
            writer.WriteStringValue("subscription_key_id", SubscriptionKeyId);
            writer.WriteStringValue("subscription_key_issuer", SubscriptionKeyIssuer);
            writer.WriteStringValue("subscription_private_key", SubscriptionPrivateKey);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
