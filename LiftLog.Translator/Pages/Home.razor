@page "/"
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<div class="top-row px-4 mb-8">
    <h1 class="mr-auto text-xl">LiftLog Translator</h1>
</div>

<div class="grid grid-cols-3 mb-8 gap-8">
    <div class="flex flex-col border-2 p-4 rounded-lg gap-2">
        <span>Select the source translation file</span>

        <button disabled=@loadingGithub class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="GetFromGithub">
            @if(loadingGithub)
            {
                <span >Loading...</span>
            }
            else
            {
                <span>Load from GitHub</span>
            }
        </button>

        <span>OR</span>
        <span>Upload a source file
            <span class="text-sm text-nowrap">(e.g. UiStrings.resx)</span></span>
        <InputFile OnChange="HandleSourceResxSelected" />
    </div>
    <div class="flex flex-col border-2 p-4 rounded-lg gap-2">
        <span>OPTIONAL Load a translated file
            <span class="text-sm text-nowrap">(e.g. UiStrings.es.resx)</span>
        </span>
        <InputFile OnChange="HandleTranslationResxSelected" />
    </div>
    <div class="flex flex-col border-2 p-4 rounded-lg gap-2">
        <span>Finally download translation file</span>
        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="DownloadTranslation" >Download</button>
    </div>
</div>

    <div class="flex flex-col border-2 p-4 rounded-lg gap-2">
        <h1 class="text-xl font-bold">Instructions</h1>
        <p>1. Load the source translation file from GitHub or upload it. This will be done automatically.</p>
        <p>2. Load a translated file if one already exists for the target language.</p>
        <p>3. Translate the values in the rightmost column of the table below.</p>
        <p>4. Download the translated file by clicking the button on the top right of the page.</p>
        <p>5. Submit an issue, including your translation file to LiftLog <a class="underline text-blue-500" href="https://github.com/LiamMorrow/LiftLog/issues/new?assignees=&labels=translation&projects=&template=translation-suggestion.md&title=%5BTranslation%5D">here.</a></p>
        <p class="font-bold">Please don't feel overwhelmed, you don't need to translate every value, any small change is appreciated. ❤️</p>

        <p class="border-t-4 pt-4 mt-4">
            Note that some translation values contain HTML tags and interpolated values. These should be preserved in the translated value. <br>
            For example, the value <span class="font-bold bg-gray-100">Hello {0}</span> should be translated as <span class="font-bold bg-gray-100">Hola {0}</span>.<br>
            The value <span class="font-bold bg-gray-100">Hello &lt;em>{0}&lt;/em></span> should be translated as <span class="font-bold bg-gray-100">Hola &lt;em>{0}&lt;/em></span>. <br>
            The <span class="font-bold bg-gray-100">{0}</span> represents a variable such as a username which will be replaced when the user runs the app.

        </p>
    </div>
<div class="mb-8 sticky py-2 top-0 z-10 w-full bg-white h-14">
    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="HideTranslated" >Hide translated</button>
    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="ShowTranslated" >Show translated</button>
    <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded" @onclick="ClearTranslated" >Clear ALL Translations</button>
</div>

<div class="grid grid-cols-4 gap-1 bg-gray-100 relative">

    <div class="bg-gray-500 text-white font-bold text-center py-2 sticky top-14">Key</div>
    <div class="bg-gray-500 text-white font-bold text-center py-2 sticky top-14">Original Value</div>
    <div class="bg-gray-500 text-white font-bold text-center py-2 sticky top-14">Comment</div>
    <div class="bg-gray-500 text-white font-bold text-center py-2 sticky top-14">Translated Value</div>
    @foreach(var sourceResx in sourceResxData.Where(x=>!hiddenKeys.Contains(x.Key)))
    {
        var translatedValue = translationResxData.GetValueOrDefault(sourceResx.Key)?.Value;

        <div class="bg-white">@sourceResx.Key</div>
        <div class="bg-white">@sourceResx.Value.Value</div>
        <div class="bg-white">@sourceResx.Value.Comment</div>
        <LiftLog.Translator.Shared.TranslationEditor  @key="sourceResx.Key"  Value="@translatedValue" OnValueChange="@((e) => HandleTranslatedTextInput(e, sourceResx.Key))" />
    }
</div>
@code {
    private HashSet<string> hiddenKeys = new();
    private bool loadingGithub = false;
    private OrderedDictionary<string, ResxValue> sourceResxData = new();
    private OrderedDictionary<string, ResxValue> translationResxData = new();

    protected override async Task OnInitializedAsync()
    {
        await GetFromGithub();
        var saved= await localStorage.GetItemAsync<OrderedDictionary<string, ResxValue>>("translation");
        if (saved != null)
        {
            translationResxData = saved;
        }
    }

    private async Task GetFromGithub()
    {
        loadingGithub = true;
        var url = "https://raw.githubusercontent.com/LiamMorrow/LiftLog/refs/heads/main/LiftLog.Ui/i18n/UiStrings.resx";
        using var request3 = new HttpRequestMessage(HttpMethod.Get, url);
        request3.SetBrowserRequestCache(BrowserRequestCache.NoCache);
        var response = await new HttpClient().SendAsync(request3);
        var xmlContent = await response.Content.ReadAsStringAsync();
        sourceResxData = ResxEditor.ReadFromXml(xmlContent);
        loadingGithub = false;
    }

    private async Task HandleSourceResxSelected(InputFileChangeEventArgs e)
    {
        var resxFile = e.GetMultipleFiles().FirstOrDefault();
        if (resxFile != null)
        {
            sourceResxData = await ReadResxFile(resxFile);
        }
    }

    private async Task HandleTranslationResxSelected(InputFileChangeEventArgs e)
    {
        var resxFile = e.GetMultipleFiles().FirstOrDefault();
        if (resxFile != null)
        {
            translationResxData = await ReadResxFile(resxFile);
        }
    }

    private async Task<OrderedDictionary<string, ResxValue>> ReadResxFile(IBrowserFile resxFile)
    {

        var stream = resxFile.OpenReadStream();
        var xmlContent = await new StreamReader(stream).ReadToEndAsync();
        return ResxEditor.ReadFromXml(xmlContent);
    }
    private async Task HandleTranslatedTextInput(string value, string key)
    {
        value ??= "";
        if (translationResxData.ContainsKey(key))
        {
            translationResxData[key] = new ResxValue(value.Trim(), translationResxData[key].Comment);
        }
        else
        {
            translationResxData.Add(key, new ResxValue(value, ""));
        }
        await localStorage.SetItemAsync("translation", translationResxData);
    }

    private async Task DownloadTranslation()
    {
        var xmlContent = ResxEditor.WriteToXml(translationResxData);
        var fileStream = new MemoryStream();
        var fileName = "UiStrings.REGION.resx";
        var writer = new StreamWriter(fileStream);
        writer.Write(xmlContent);
        writer.Flush();
        fileStream.Position = 0;

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private void HideTranslated()
    {
        hiddenKeys = new HashSet<string>(sourceResxData.Keys.Intersect(translationResxData.Where(x=>!string.IsNullOrWhiteSpace(x.Value.Value)).Select(x=>x.Key)));
    }

    private void ShowTranslated()
    {
        hiddenKeys = new HashSet<string>();
    }

    private async Task ClearTranslated()
    {
        var confirmResult = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to clear all translations?");
        if (!confirmResult)
        {
            return;
        }
        translationResxData = new();
        hiddenKeys = new();
        await localStorage.RemoveItemAsync("translation");
        await InvokeAsync(StateHasChanged);
    }
}
