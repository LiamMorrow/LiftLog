@using Fluxor
@using LiftLog.Ui.Store.App
@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@inject IJSRuntime Js
@inject IState<AppState> AppState
@inject IThemeProvider ThemeProvider
@inject NavigationManager NavigationManager

<CascadingValue Name="UseImperial" Value="AppState.Value.UseImperialUnits">
<div class="h-full page bg-surface">
    <section class="relative h-full content">
        <div class="grid grid-cols-1 h-full grid-rows-[min-content_1fr_min-content]">
            <div class="flex flex-col @_topNavColorClass transition-colors">
                <div style="height: @ThemeProvider.SystemSafeInsetTop"></div>
                <div class="flex items-center px-4 py-4 gap-2 text-2xl @Justify ">
                    @RenderBackButton()
                    <div class="h-[40px] flex items-center">
                        <span class="m-0 text-on-surface">@AppState.Value.Title</span>
                    </div>
                </div>
            </div>
            <div @ref="_contentElementRef" id="scrollingElement" class="px-2 pb-2 overflow-auto bg-surface flex flex-col" @onscroll="OnContentScroll" style="-webkit-overflow-scrolling: touch;">
                @Body
            </div>
            <NavBar></NavBar>
        </div>
    </section>
</div>
</CascadingValue>

<HeadContent>
    <title>@AppState.Value.Title</title>
</HeadContent>

@code {

    private ElementReference _contentElementRef;

    private string _topNavColorClass = "bg-surface";

    protected override void OnInitialized()
    {
        ThemeProvider.InsetsChanged += (_,_)=>
        {
            InvokeAsync(StateHasChanged);
        };
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
#if DEBUG
        if (firstRender)
        {
            await Js.InvokeAsync<IJSObjectReference>("import", "/_content/LiftLog.Ui/load-tailwind.js");
        }
#endif
        if (firstRender)
        {
            NavigationManager.LocationChanged += HandleLocationChanged;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await Task.Yield();
        await Js.InvokeVoidAsync("AppUtils.scrollToTop", _contentElementRef);
    }

    private async void OnContentScroll()
    {
        var scrollTop = await Js.InvokeAsync<double>("AppUtils.getScrollTop", _contentElementRef);
        var previousTopNavColorClass = _topNavColorClass;
        _topNavColorClass = scrollTop switch {
            // make it coloured after scrolling past 2px
            (<=2) => "bg-surface",
            _ => "bg-surface-container"
            };
            if(previousTopNavColorClass != _topNavColorClass)
            {
                await InvokeAsync(async ()=>
                {
                    StateHasChanged();
                    await Task.Yield();
                });
            }
    }

    private string Justify => AppState.Value.BackNavigationUrl is null ? "justify-center" : "justify-start";

    private RenderFragment? RenderBackButton()
    {
        var backButtonUrl = AppState.Value.BackNavigationUrl;
        if (backButtonUrl is null)
        {
            return null;
        }

        return @<IconButton Icon="arrow_back" Type=IconButtonType.Standard OnClick="() => NavigationManager.NavigateTo(backButtonUrl)" />;
    }

}
