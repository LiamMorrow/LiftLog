@using Fluxor
@using LiftLog.Ui.Store.App
@using ApexCharts;

@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@inject IJSRuntime Js
@inject IState<AppState> AppState
@inject IState<SettingsState> SettingsState
@inject IState<ProgramState> ProgramState
@inject IState<FeedState> FeedState
@inject IState<CurrentSessionState> CurrentSessionState
@inject InsetsManager InsetsManager
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

<CascadingValue Name="UseImperial" Value="SettingsState.Value.UseImperialUnits">
    <CascadingValue Name="TopNavColorClass" Value="_topNavColorClass">
        <div class="h-full page bg-surface">
            <section class="relative h-full content">
                <div class="grid grid-cols-1 h-full grid-rows-[min-content_1fr_min-content]">
                    <div class="flex flex-col @_topNavColorClass transition-colors">
                        <div style="height: @TopInset"></div>
                        <div class="flex items-center gap-2 p-4 text-2xl">
                            @RenderBackButton()
                            <div class="h-[48px] flex items-center justify-center">
                                <span class="m-0 text-on-surface capitalize">@AppState.Value.Title</span>
                            </div>
                            <div class="flex ml-auto flex-1 justify-end">
                                <Microsoft.AspNetCore.Components.Sections.SectionOutlet SectionName="TrailingTitleButton"></Microsoft.AspNetCore.Components.Sections.SectionOutlet>
                            </div>
                        </div>
                    </div>
                    <div @ref="_contentElementRef" id="scrollingElement" class="pb-2 overflow-auto bg-surface scroll-smooth" @onscroll="OnContentScroll" style="-webkit-overflow-scrolling: touch;">
                        @if (StateIsHydrated)
                        {
                            <AppReviewRequest/>
                            @Body
                        }
                        else
                        {
                            <Loader />
                        }
                    </div>
                    <NavBar></NavBar>
                </div>
            </section>
        </div>
    </CascadingValue>
</CascadingValue>

<Microsoft.AspNetCore.Components.Sections.SectionOutlet SectionName="FullscreenDialog"></Microsoft.AspNetCore.Components.Sections.SectionOutlet>
<Microsoft.AspNetCore.Components.Sections.SectionOutlet SectionName="Dialog"></Microsoft.AspNetCore.Components.Sections.SectionOutlet>
<Microsoft.AspNetCore.Components.Sections.SectionOutlet SectionName="AndroidNotificationDialog"></Microsoft.AspNetCore.Components.Sections.SectionOutlet>
<ToastComponent/>
<HeadContent>
    <title>@AppState.Value.Title</title>
</HeadContent>

@code {

    private ElementReference _contentElementRef;

    private string _topNavColorClass = "bg-surface";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InsetsManager.InsetsChanged += (_, _) => { InvokeAsync(StateHasChanged); };
        NavigationManager.RegisterLocationChangingHandler(async context =>
        {
            var closedDialog = await Js.InvokeAsync<bool>("AppUtils.closeActiveDialog");

            if (closedDialog)
            {
                context.PreventNavigation();
            }
        });

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
#if DEBUG
        if (firstRender)
        {
            await Js.InvokeAsync<IJSObjectReference>("import", "/_content/LiftLog.Ui/load-tailwind.js");
        }
#endif
        if (firstRender)
        {
            NavigationManager.LocationChanged += HandleLocationChanged;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await Task.Yield();
        await Js.InvokeVoidAsync("AppUtils.scrollToTop", _contentElementRef);
    }

    private bool StateIsHydrated
        => ProgramState.Value.IsHydrated
           && FeedState.Value.IsHydrated
           && CurrentSessionState.Value.IsHydrated
           && SettingsState.Value.IsHydrated
           && AppState.Value.IsHydrated;

    private async void OnContentScroll()
    {
        var scrollTop = await Js.InvokeAsync<double>("AppUtils.getScrollTop", _contentElementRef);
        var previousTopNavColorClass = _topNavColorClass;
        _topNavColorClass = scrollTop switch
        {
            // make it coloured after scrolling past 2px
            (<= 2) => "bg-surface",
            _ => "bg-surface-container"
        };
        if (previousTopNavColorClass != _topNavColorClass)
        {
            await InvokeAsync(async () =>
            {
                StateHasChanged();
                await Task.Yield();
            });
        }
    }

    private string Justify => AppState.Value.BackNavigationUrl is null ? "justify-center" : "justify-start";

    private string TopInset => InsetsManager.SystemSafeInsetTop;

    private RenderFragment? RenderBackButton()
    {
        var backButtonUrl = AppState.Value.BackNavigationUrl;
        if (backButtonUrl is null)
        {
            return @<div class="mr-auto flex-1 flex justify-start"></div>;
        }

        return @<IconButton data-cy="back-btn" Icon="arrow_back" Type="IconButtonType.Standard" OnClick="HandleBackButtonPress"/>;
    }

    private void HandleBackButtonPress()
    {
        if(AppState.Value.BackNavigationUrl is not null)
        {
            Dispatcher.Dispatch(new NavigateAction(AppState.Value.BackNavigationUrl));
        }
    }
}
