@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDeviceService DeviceService

@inject IState<AppState> AppState
@inject IDispatcher Dispatcher

<Dialog @ref="rateDialog">
    <span slot="headline">@UiStrings.EnjoyingLiftLogQuestion</span>
    <span slot="content" class="block text-start">@UiStrings.EnjoyingLiftLogMessage(ReviewType, AppStore)</span>
    <div slot="actions" class="flex">
        <AppButton Type="AppButtonType.Text" class="mr-auto" OnClick="Never">@UiStrings.Never</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="NotNow">@UiStrings.NotNow</AppButton>
        @if(DeviceService.GetDeviceType() == DeviceType.Web)
        {
            <AppButton Type="AppButtonType.Text" OnClick="Rate" target="_blank" href="https://github.com/LiamMorrow/LiftLog">@UiStrings.Rate</AppButton>
        }
        else
        {
            <AppButton Type="AppButtonType.Text" OnClick="Rate">@UiStrings.Rate</AppButton>
        }
    </div>
</Dialog>

@code
{
    private Dialog? rateDialog;

    private string AppStore => DeviceService.GetDeviceType() switch
    {
        DeviceType.Android => "the Google Play Store",
        DeviceType.Ios => "the App Store",
        _ => "Github"
    };

    private string ReviewType => DeviceService.GetDeviceType() switch
    {
        DeviceType.Web => UiStrings.GithubStar,
        _ => UiStrings.Review
    };

    private void Never()
    {
        Dispatcher.Dispatch(new SetAppRatingResultAction(AppRatingResult.Declined));
        rateDialog?.Close();
    }

    private void NotNow()
    {
        Dispatcher.Dispatch(new SetAppLaunchCountAction(0));
        rateDialog?.Close();
    }

    private void Rate()
    {
        Dispatcher.Dispatch(new SetAppRatingResultAction(AppRatingResult.Rated));
        Dispatcher.Dispatch(new RequestReviewAction());
        rateDialog?.Close();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppState.StateChanged += HandleAppStateChange;
        Dispatcher.Dispatch(new IncrementAppLaunchCountAction());
    }

    private void HandleAppStateChange(object? sender, EventArgs e)
    {
        if (AppState.Value.IsHydrated && AppState.Value.AppRatingResult == AppRatingResult.NotRated
            && AppState.Value.AppLaunchCount >= 5
            && AppState.Value.AppLaunchCount % 5 == 0)
        {
            rateDialog?.Open();
        }
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        AppState.StateChanged -= HandleAppStateChange;
        return base.DisposeAsyncCore(disposing);
    }
}
