<div class="flex flex-col gap-4">
    <span>
        You can tap the weight button to specify different weights for each set in an exercise. This can be used to track drop sets.<br/>
        <span class="text-primary font-bold">Try it now!</span>
    </span>
    <div class="flex gap-2">
        <PotentialSetCounter
            Set="set1"
            ShowWeight="showWeight"
            MaxReps="8"
            WeightIncrement="2.5m"
            OnTap="@(() => set1 = CycleRepCountForSet(set1))"
            OnHold="@(() => {})"
            OnUpdateWeight="@((w) => { set1 = set1 with { Weight = w }; })"
            ToStartNext="@(set1.Set is null)"
            IsReadonly=false />
        <PotentialSetCounter
            Set="set2"
            ShowWeight="showWeight"
            MaxReps="8"
            WeightIncrement="2.5m"
            OnTap="@(() => set2 = CycleRepCountForSet(set2))"
            OnHold="@(() => {})"
            OnUpdateWeight="@((w) => { set2 = set2 with { Weight = w }; })"
            ToStartNext="@(set2.Set is null)"
            IsReadonly=false />
        <div class="ml-auto">
            <IconButton Type="IconButtonType.Standard" Icon="weight" OnClick=@(() => showWeight=!showWeight)/>
        </div>
    </div>
</div>


@code{

    private bool showWeight = true;

    private PotentialSet set1 = new PotentialSet(new RecordedSet(8, DateOnly.FromDateTime(DateTime.Now), TimeOnly.MinValue), 10m);
    private PotentialSet set2 = new PotentialSet(null, 5m);

    private PotentialSet CycleRepCountForSet(PotentialSet set)
    {
        return set with
        {
            Set = set.Set switch
            {
                // When unset - we say the user completed all reps
                null => new RecordedSet(8, DateOnly.FromDateTime(DateTime.Now), TimeOnly.FromDateTime(DateTime.Now)),
                // When they completed no reps, we transition back to unset
                { RepsCompleted: 0 } => null,
                // Otherwise, just decrement from the current
                var reps => reps with { RepsCompleted = reps.RepsCompleted - 1 }
            }
        };
    }
}
