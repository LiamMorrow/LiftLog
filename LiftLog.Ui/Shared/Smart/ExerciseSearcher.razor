@inject IState<ExercisesState> State
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<Menu
    @ref="exerciseListMenu"
    ShowScrim=false
    default-focus="none"
    role="listbox"
    anchor="@Anchor"
    skip-restore-focus=true
    stay-open-on-outside-click=true
    stay-open-on-focusout=true
    anchor-corner="end-start"
    menu-corner="start-start"
    class="text-start">
    @foreach (var describedExercise in filteredExercises)
    {
        <MenuItem Label="@describedExercise" Icon="" OnClick="() => ValueChanged.InvokeAsync(describedExercise)"/>
    }
</Menu>

@code {
    private Menu? exerciseListMenu;
    private string previousValue = "";
    [Parameter] public string Anchor { get; set; } = "";

    [Parameter] public string Value { get; set; } = "";

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private IReadOnlyList<string> filteredExercises { get; set; } = new List<string>();

    protected override async void OnParametersSet()
    {
        base.OnParametersSet();
        if(previousValue == Value){
            previousValue = Value;
            return;
        }
        previousValue = Value;
        var val = Value;
        var fe = await Task.Run(()=>GetTopMatches(val, State.Value.ExerciseNames));
        if(val == Value)
        {
            filteredExercises = fe;
            StateHasChanged();
        }
    }

    protected override void OnInitialized(){

        base.OnInitialized();
        Dispatcher.Dispatch(new FetchDescribedExercisesAction());
    }


    public void Open(){
        exerciseListMenu?.Open();
    }

    public void Close(){
        exerciseListMenu?.Close();
    }
}
