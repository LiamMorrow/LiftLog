@using System.Text.RegularExpressions

@inject NavigationManager NavigationManager
@inject IState<CurrentSessionState> CurrentSessionState
@inject IState<AppState> AppState
@inject IState<FeedState> FeedState
@inject IState<SettingsState> SettingsState
@inject IDispatcher Dispatcher
@inject InsetsManager InsetsManager
@inject IStringLocalizer<UiStrings> UiStrings

@inherits Fluxor.Blazor.Web.Components.FluxorComponent


<nav class="flex flex-col bg-surface-container text-on-surface">
    <div class="flex justify-around py-3">
        <NavButton IsActive=@IsRouteMatch("(/$|^$|/session/?)") Navigate="NavigateToWorkout" Icon="fitness_center" Text="@(UiStrings.Workout())"></NavButton>
        @if (SettingsState.Value.ShowFeed)
        {
            <NavButton IsActive=@IsRouteMatch("/feed(/?.*)") Navigate="NavigateToFeed" Icon="forum" Text="@(UiStrings.Feed())" ShowBadge=@(FeedState.Value.FollowRequests.Any())></NavButton>
        }
        <NavButton IsActive=@IsRouteMatch("/stats(/?.*)") Navigate="NavigateToStats" Icon="analytics" Text="@(UiStrings.Stats())"></NavButton>
        <NavButton IsActive=@IsRouteMatch("/history(/?.*)") Navigate="NavigateToHistory" Icon="history" Text="@(UiStrings.History())"></NavButton>
        <NavButton IsActive=@IsRouteMatch("/settings(/?.*)") Navigate="NavigateToSettings" Icon="settings" Text="@(UiStrings.Settings())"></NavButton>
    </div>
    <div style="height: @BottomInset"></div>
</nav>

@code {

    private string BottomInset => SettingsState.Value.StatusBarFix ? "32px" : InsetsManager.SystemSafeInsetBottom;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NavigationManager.LocationChanged += LocationChanged;
        InsetsManager.InsetsChanged += (_, _) => { InvokeAsync(StateHasChanged); };
    }

    private bool IsRouteMatch(string routeMatchRegex)
    {
        var reg = new Regex(routeMatchRegex);
        var absPath = new Uri(NavigationManager.Uri).AbsolutePath;
        return reg.IsMatch(absPath);
    }

    private void NavigateToWorkout()
    {
        if (CurrentSessionState.Value.WorkoutSession != null
            && AppState.Value.ReopenCurrentSessionTargets.Contains(SessionTarget.WorkoutSession)
            && !IsRouteMatch("/session/?$"))
        {
            Dispatcher.Dispatch(new NavigateAction("/session", ClearPageStack: false));
            StateHasChanged();
            return;
        }

        Dispatcher.Dispatch(new NavigateAction("/", ClearPageStack: false));
        StateHasChanged();
    }

    private void NavigateToSettings()
    {
        if (AppState.Value.LatestSettingsUrl != null && !IsRouteMatch("/settings.*"))
        {
            Dispatcher.Dispatch(new NavigateAction(AppState.Value.LatestSettingsUrl));
            StateHasChanged();
            return;
        }
        Dispatcher.Dispatch(new NavigateAction("/settings", ClearPageStack: true));
        StateHasChanged();
    }

    private void NavigateToFeed()
    {
        if (CurrentSessionState.Value.FeedSession != null
            && AppState.Value.ReopenCurrentSessionTargets.Contains(SessionTarget.FeedSession)
            && !IsRouteMatch("/feed/?.*$"))
        {
            var feedItem = FeedState.Value.Feed.OfType<SessionFeedItem>().FirstOrDefault(x => x.Session.Id == CurrentSessionState.Value.FeedSession.Id);
            if (feedItem != null)
            {
                Dispatcher.Dispatch(new NavigateAction("feed/view-session/"+feedItem.EventId, ClearPageStack: false));
                StateHasChanged();
                return;
            }
        }
        Dispatcher.Dispatch(new NavigateAction("/feed", ClearPageStack: false));
        StateHasChanged();
    }

    private void NavigateToHistory()
    {
        if (CurrentSessionState.Value.HistorySession != null
            && AppState.Value.ReopenCurrentSessionTargets.Contains(SessionTarget.HistorySession)
            && !IsRouteMatch("/history/?.*$"))
        {
            Dispatcher.Dispatch(new NavigateAction("/history/edit", ClearPageStack: false));
            StateHasChanged();
            return;
        }
        Dispatcher.Dispatch(new NavigateAction("/history", ClearPageStack: false));
        StateHasChanged();
    }

    private void NavigateToStats()
    {
        Dispatcher.Dispatch(new NavigateAction("/stats", ClearPageStack: false));
        StateHasChanged();
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs locationChangedEventArgs)
    {
        if(locationChangedEventArgs.Location.Contains("settings")){
            Dispatcher.Dispatch(new SetLatestSettingsUrlAction(locationChangedEventArgs.Location));
        }
        InvokeAsync(StateHasChanged);
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        NavigationManager.LocationChanged -= LocationChanged;
        return base.DisposeAsyncCore(disposing);
    }

}
