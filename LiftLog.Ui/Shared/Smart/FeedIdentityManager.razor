

@inject IState<FeedState> FeedState
@inject IStringSharer StringSharer
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent


<div class="h-full flex flex-col">
    <Remote Value="FeedIdentity" Retry="CreateFeedIdentity">
        <div class="text-on-surface flex flex-col gap-4">
            <LabelledForm>
                <LabelledFormRow Label="@UiStrings.YourName" Icon="person">
                <TextField Value="@context.Name" label="@UiStrings.Optional" OnChange=@SetName/>
                </LabelledFormRow>
                <FeedShareUrl/>
                </LabelledForm>
            <md-list>
                <ListSwitch Headline="@UiStrings.PublishWorkout" SupportingText="@UiStrings.PublishWorkoutSubtitle" Value=@context.PublishWorkouts OnSwitched="SetPublishWorkouts"/>
                <ListSwitch Headline="@UiStrings.PublishBodyweight" SupportingText="@UiStrings.PublishBodyweightSubtitle"  Value=@context.PublishBodyweight OnSwitched="SetPublishBodyweight"/>
                <ListSwitch Headline="@UiStrings.PublishPlan" SupportingText="@UiStrings.PublishPlanSubtitle" Value=@context.PublishPlan OnSwitched="SetPublishPlan"/>
            </md-list>
            <AppButton Type=AppButtonType.Text OnClick="@(() => stopPublishingDialog?.Open())">@UiStrings.ResetAccount</AppButton>
        </div>
    </Remote>
</div>

<Dialog @ref="stopPublishingDialog">
    <span slot="headline">@UiStrings.ResetAccount</span>
    <span slot="content" class="block text-left">@UiStrings.ResetAccountMessage</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="@(() => stopPublishingDialog?.Close())">@UiStrings.Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="StopPublishing">@UiStrings.ResetAccount</AppButton>
    </div>
</Dialog>


@code {
    private Dialog? stopPublishingDialog;

    private RemoteData<FeedIdentity> FeedIdentity =>
        FeedState.Value.Identity is null
            ? Error is not null
                ? RemoteData.Errored(Error)
                : RemoteData.Loading
            : RemoteData.Success(FeedState.Value.Identity);

    private string? Error;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SubscribeToAction<FeedApiErrorAction>(OnError);
        if(FeedState.Value.Identity is null)
            CreateFeedIdentity();
    }

    private UpdateFeedIdentityAction GetUpdateAction()
    {
        if (FeedState.Value.Identity is null)
            return new UpdateFeedIdentityAction(null, null, false, false, false, FromUserAction: true);

        return new UpdateFeedIdentityAction(
                FeedState.Value.Identity.Name ?? "",
                FeedState.Value.Identity.ProfilePicture,
                FeedState.Value.Identity.PublishBodyweight,
                FeedState.Value.Identity.PublishPlan,
                FeedState.Value.Identity.PublishWorkouts,
                FromUserAction: true);
    }

    private void SetName(string value)
    {
        Dispatcher.Dispatch(GetUpdateAction() with { Name = value == "" ? null : value });
    }

    private void SetPublishBodyweight(bool value)
    {
        Dispatcher.Dispatch(GetUpdateAction() with { PublishBodyweight = value });
    }

    private void SetPublishWorkouts(bool value)
    {
        Dispatcher.Dispatch(GetUpdateAction() with { PublishWorkouts = value });
    }

    private void SetPublishPlan(bool value)
    {
        Dispatcher.Dispatch(GetUpdateAction() with { PublishPlan = value });
    }

    private void StopPublishing()
    {
        Dispatcher.Dispatch(new DeleteFeedIdentityAction());
        stopPublishingDialog?.Close();
    }

    private void CreateFeedIdentity()
    {
        Dispatcher.Dispatch(new CreateFeedIdentityAction(null, null, false, false, false, FromUserAction: true));
    }

    private void OnError(FeedApiErrorAction action)
    {
        Error = action.Message;
        Dispatcher.Dispatch(new ToastAction(action.Message));
        StateHasChanged();
    }

}
