@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Settings

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IAppPurchaseService AppPurchaseService
@inject IState<AppState> AppState
@inject IDispatcher Dispatcher

<md-list>
    <div class="flex justify-between items-center">
        <ListTitle Title="@UiStrings.ProFeatures" />
        @RenderLockedPro()
    </div>
    <md-list-item type="button" class="text-left" multi-line-supporting-text disabled=@(!AppState.Value.ProState.IsPro) @onclick="NavigateToAiPlanner">
        <md-icon slot="start">bolt</md-icon>
        <span slot="headline">@UiStrings.AiPlanner</span>
        <span slot="supporting-text">@UiStrings.AiPlannerSubtitle</span>
    </md-list-item>
    <md-list-item type="button" class="text-left" multi-line-supporting-text disabled=@(!AppState.Value.ProState.IsPro) @onclick="NavigateToAiSessionCreator">
        <md-icon slot="start">auto_awesome</md-icon>
        <span slot="headline">@UiStrings.AiSessionCreator</span>
        <span slot="supporting-text">@UiStrings.AiSessionCreatorSubtitle</span>
    </md-list-item>
</md-list>

<Dialog @ref="upgradeDialog">
    <span slot="headline">@UiStrings.UpgradeToPro</span>
    <span slot="content" class="block text-left">
        <LimitedHtml Value="@UiStrings.UpgradeToProDescription" />
        @RenderPrice()
    </span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="() => upgradeDialog?.Close()">@UiStrings.Close</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="UpgradeToPro">@UiStrings.Upgrade</AppButton>
    </div>

</Dialog>

@code {
    private Price? price;
    private Dialog? upgradeDialog;

    protected override async Task OnInitializedAsync()
    {
        price = await AppPurchaseService.GetProPriceAsync();
        await base.OnInitializedAsync();
    }

    private RenderFragment? RenderLockedPro()
    {
        if (AppState.Value.ProState.IsPro)
        {
            return null;
        }

        return @<AppButton Icon="lock" class="mr-2" OnClick="() => { upgradeDialog?.Open(); }">@UiStrings.Unlock</AppButton>;
    }

    private RenderFragment RenderPrice()
    {
        if (price == null)
        {
            return @<span class="animate-pulse">
                       <span class="inline-block min-h-[1em] w-[4rem] flex-auto cursor-wait bg-current align-middle text-base text-neutral-700 opacity-50 dark:text-neutral-50"></span>
                   </span>;
        }

        return @<span>@(price?.LocalizedPrice) @(price?.Currency)</span>;
    }

    private void NavigateToAiPlanner()
    {
        if(!AppState.Value.ProState.IsPro)
        {
            return;
        }
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(NavigationManager.Uri));
        NavigationManager.NavigateTo("/settings/ai-planner");
    }

    private void NavigateToAiSessionCreator()
    {
        if(!AppState.Value.ProState.IsPro)
        {
            return;
        }
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(NavigationManager.Uri));
        NavigationManager.NavigateTo("/settings/ai-session-creator");
    }


    private async void UpgradeToPro()
    {
        var proKey = await AppPurchaseService.GetProKeyAsync();
        if (proKey != null)
        {
            Dispatcher.Dispatch(new SetProTokenAction(proKey));
        }

        await InvokeAsync(() => upgradeDialog?.Close());
    }

}
