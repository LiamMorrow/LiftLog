@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<ProgramState> ProgramState
@inject IState<CurrentSessionState> CurrentSessionState
@inject IDispatcher Dispatcher

@if(Session.Blueprint.Notes != "")
{
    <Card class="my-2 mx-7 gap-4 text-start flex items-center" Type=Card.CardType.Filled>
        <md-icon>notes</md-icon>
        <p><MultilineString Value=@Session.Blueprint.Notes /></p>
    </Card>
}

@if (!Session.RecordedExercises.Any())
{
    <EmptyInfo class="my-8">
        @UiStrings.SessionContainsNoExercises
    </EmptyInfo>
}
else
{
    <ItemList Items="Session.RecordedExercises.Index()">
        <WeightedExercise
            @key=context.Index
            RecordedExercise="context.Item"
            ToStartNext=@(Session.NextExercise == context.Item)
            CycleRepCountForSet=CycleRepCountForExerciseSet(context.Index)
            ShowAdditionalActionsForSet=@(ShowAdditionalActionsForExerciseSet(context.Index))
            UpdateWeightForExercise=UpdateWeightForExerciseWrapper(context.Index)
            PreviousRecordedExercises=@(PreviouslyCompleted.GetValueOrDefault(context.Item.Blueprint, []))
            ToggleExercisePerSetWeight=@(() => ToggleExercisePerSetWeight(context.Index))
            UpdateWeightForSet=@((setIndex, weight) => UpdateWeightForSet(context.Index, setIndex, weight))
            UpdateNotesForExercise=@((notes) => UpdateNotesForExercise(context.Index, notes))
            OnEditExercise=@(() => BeginEditExercise(context.Index))
            OnRemoveExercise=@(() => BeginRemoveExercise(context.Index))
            OnOpenLink=@(() => Dispatcher.Dispatch(new OpenExternalUrlAction(context.Item.Blueprint.Link.Trim())))
            IsReadonly=IsReadonly
            ShowPreviousButton=@(SessionTarget == SessionTarget.WorkoutSession) />
    </ItemList>
}
@if (ShowBodyweight)
{
    <Card class="flex justify-between items-center mx-2" Type=Card.CardType.Filled >
        <span class="text-xl font-bold">@UiStrings.Bodyweight</span>
        <WeightDisplay AllowNull=true Weight=Session.Bodyweight UpdateWeight="UpdateBodyweight" Increment="0.1m" Label="@UiStrings.Bodyweight"/>
    </Card>
}

@if (!IsReadonly)
{
    <div class="flex  justify-center gap-2 mt-6">
        @if (!SessionInPlan && Session.RecordedExercises.Any())
        {
            <AppButton Icon="assignment_add" Type="AppButtonType.Secondary" OnClick="@(() => _updatePlanDialog?.Open())">
                @UiStrings.UpdatePlan
            </AppButton>
        }
    </div>
}
@if (!IsReadonly)
{
    <FloatingBottomContainer>
        <Fab>
            <FloatingButton size="small" variant="surface" aria-label="Add Exercise" label="@UiStrings.AddExercise" OnClick="BeginAddExercise"><md-icon slot="icon">add</md-icon></FloatingButton>
        </Fab>
        <AdditionalContent>@RenderSnackBar()</AdditionalContent>
    </FloatingBottomContainer>
}
else
{
    <FloatingBottomContainer>
        <AdditionalContent>@RenderSnackBar()</AdditionalContent>
    </FloatingBottomContainer>
}

@if(IsInActiveScreen && !IsReadonly)
{
    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="TrailingTitleButton">
        <AppButton class="text-lg" Type=AppButtonType.Text OnClick=SaveSession data-cy="save-session-button">
            @(SessionTarget == SessionTarget.WorkoutSession ? UiStrings.Finish : UiStrings.Save)
        </AppButton>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
}

<FullScreenDialog
    @ref=_editExerciseDialog
    Title=@(_exerciseToEditIndex is null ? UiStrings.AddExercise : UiStrings.EditExercise)
    Action="@(_exerciseToEditIndex is null ? UiStrings.Add : UiStrings.Update)"
    OnAction="EditExerciseHandler"
    OnClose="@(() => _exerciseToEditIndex = null)"
    >
        <ExerciseEditor Exercise="editingExerciseBlueprint" UpdateExercise="(ex) => {editingExerciseBlueprint = ex; StateHasChanged();}" />
</FullScreenDialog>

<Dialog @ref="setAdditionalActionsDialog" PreventCancel=true>
    @if(setAdditionalActions != null)
    {
        var exercise = Session.RecordedExercises[setAdditionalActions.Value.ExerciseIndex];
        var set = exercise.PotentialSets[setAdditionalActions.Value.PotentialSetIndex];
        <span slot="headline" class="select-none">@UiStrings.SelectReps</span>
        <span slot="content" >
        <PotentialSetAdditionalActions
            Set="set"
            MaxReps=exercise.Blueprint.RepsPerSet
            OnSelectRepCount="@((reps)=>{
                SetRepCountForExercise(setAdditionalActions.Value.ExerciseIndex, setAdditionalActions.Value.PotentialSetIndex,reps);
                setAdditionalActionsDialog?.Close();
                })"
            OnDeleteSet=@(()=>{})></PotentialSetAdditionalActions>
        </span>
        <div slot="actions">
            <AppButton Type="AppButtonType.Text" OnClick="@(() => setAdditionalActionsDialog?.Close())">@UiStrings.Cancel</AppButton>
        </div>
    }
</Dialog>


<Dialog @ref="_removeExerciseDialog">
    <span slot="headline">@UiStrings.RemoveExerciseQuestion</span>
    <span slot="content" class="block text-left">
        @UiStrings.RemoveExerciseMessage
    </span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" slot="footer" OnClick="() => { _removeExerciseDialog?.Close(); }">@UiStrings.Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" slot="footer" OnClick="RemoveExerciseHandler">@UiStrings.Remove</AppButton>
    </div>
</Dialog>

<Dialog @ref="_updatePlanDialog">
    <span slot="headline">@UiStrings.UpdatePlan</span>
    <span slot="content" class="block text-left">
        @UiStrings.PlanWillBeUpdated
        @if (SessionWithSameNameInPlan)
        {
            <LimitedHtml Value=@(UiStrings.UpdateExistingWorkout(Session.Blueprint.Name))/>
        }
    </span>
    <div slot="actions">
        <div class="flex justify-between flex-grow">
            <AppButton Type="AppButtonType.Text" slot="footer" OnClick="@(() => _updatePlanDialog?.Close())">@UiStrings.Cancel</AppButton>
            <div>
                <AppButton Type="AppButtonType.Text" slot="footer" OnClick="HandleAddAsNewSession">@UiStrings.Add</AppButton>
                @if (SessionWithSameNameInPlan)
                {
                    <AppButton Type="AppButtonType.Text" slot="footer" OnClick="HandleUpdateInPlan">
                        @UiStrings.Update
                    </AppButton>
                }
            </div>
        </div>
    </div>
</Dialog>

@code {

    private ExerciseBlueprint editingExerciseBlueprint = ExerciseBlueprint.Default;

    private (int ExerciseIndex, int PotentialSetIndex)? setAdditionalActions;
    private int? _exerciseToEditIndex;
    private int? _exerciseToRemoveIndex;
    private FullScreenDialog? _editExerciseDialog;
    private Dialog? _removeExerciseDialog;
    private Dialog? _updatePlanDialog;
    private Dialog? setAdditionalActionsDialog;

    private Session Session => SessionTarget switch {
        SessionTarget.WorkoutSession => CurrentSessionState.Value.WorkoutSession,
        SessionTarget.HistorySession => CurrentSessionState.Value.HistorySession,
        SessionTarget.FeedSession => CurrentSessionState.Value.FeedSession,
    } ?? Session.Empty;

    [EditorRequired] [Parameter] public ImmutableDictionary<KeyedExerciseBlueprint, ImmutableListValue<DatedRecordedExercise>> PreviouslyCompleted { get; set; } = null!;

    [Parameter] public bool ShowRestTimer { get; set; } = true;

    [Parameter] [EditorRequired] public string NavigateOnClose { get; set; } = null!;

    [Parameter] [EditorRequired] public SessionTarget SessionTarget { get; set; }

    [Parameter] [EditorRequired] public bool ShowBodyweight { get; set; }

    [Parameter] public bool IsReadonly { get; set; } = false;

    [Parameter] public string? Username { get; set; }

    [CascadingParameter(Name = "IsInActiveScreen")]
    public bool IsInActiveScreen { get; set; }

    public bool SessionInPlan => ProgramState.Value.GetActivePlanSessionBlueprints().Contains(Session.Blueprint);

    public bool SessionWithSameNameInPlan => ProgramState.Value.GetActivePlanSessionBlueprints().Any(x => x.Name == Session.Blueprint.Name);

    private void CycleRepcountForExercise(int exerciseIndex, int setIndex)
    {
        Dispatcher.Dispatch(new CycleExerciseRepsAction(SessionTarget, exerciseIndex, setIndex));
        if(ShowRestTimer)
            Dispatcher.Dispatch(new NotifySetTimerAction(SessionTarget));
    }

    private void SetRepCountForExercise(int exerciseIndex, int setIndex, int? reps)
    {
        Dispatcher.Dispatch(new SetExerciseRepsAction(SessionTarget, exerciseIndex, setIndex, reps));
        if(ShowRestTimer)
            Dispatcher.Dispatch(new NotifySetTimerAction(SessionTarget));
    }

    private void UpdateBodyweight(decimal? bodyweight)
        => Dispatcher.Dispatch(new UpdateBodyweightAction(SessionTarget, bodyweight));

    private void UpdateNotesForExercise(int exerciseIndex, string? notes)
        => Dispatcher.Dispatch(new UpdateNotesForExerciseAction(SessionTarget, exerciseIndex, notes));

    private void UpdateWeightForExercise(int exerciseIndex, decimal weight)
        => Dispatcher.Dispatch(new UpdateExerciseWeightAction(SessionTarget, exerciseIndex, weight));

    private void ToggleExercisePerSetWeight(int exerciseIndex)
        => Dispatcher.Dispatch(new ToggleExercisePerSetWeightAction(SessionTarget, exerciseIndex));

    private void UpdateWeightForSet(int exerciseIndex, int setIndex, decimal weight)
        => Dispatcher.Dispatch(new UpdateWeightForSetAction(SessionTarget, exerciseIndex, setIndex, weight));

    private void EditExercise(int exerciseIndex, ExerciseBlueprint exercise)
        => Dispatcher.Dispatch(new EditExerciseInActiveSessionAction(SessionTarget, exerciseIndex, exercise));

    private void AddExercise(ExerciseBlueprint exercise)
        => Dispatcher.Dispatch(new AddExerciseToActiveSessionAction(SessionTarget, exercise));

    private void RemoveExercise(int exerciseIndex)
        => Dispatcher.Dispatch(new RemoveExerciseFromActiveSessionAction(SessionTarget, exerciseIndex));


    private Action<int> CycleRepCountForExerciseSet(int exerciseIndex)
        => (int set) => CycleRepcountForExercise(exerciseIndex, set);


    private Action<int> ShowAdditionalActionsForExerciseSet(int exerciseIndex)
        => (int setIndex) =>
        {
            setAdditionalActions = (exerciseIndex, setIndex);
            setAdditionalActionsDialog?.Open();
        };



    private Action<decimal> UpdateWeightForExerciseWrapper(int exerciseIndex)
        => (decimal weight) => UpdateWeightForExercise(exerciseIndex, weight);

    private void EditExerciseHandler()
    {
        if (editingExerciseBlueprint is not null)
        {
            if (_exerciseToEditIndex is not null)
            {
                EditExercise(_exerciseToEditIndex.Value, editingExerciseBlueprint);
                _exerciseToEditIndex = null;
            }
            else
            {
                AddExercise(editingExerciseBlueprint);
            }
        }

        _editExerciseDialog?.Close();
    }

    private void RemoveExerciseHandler()
    {
        if (_exerciseToRemoveIndex is not null)
        {
            RemoveExercise(_exerciseToRemoveIndex.Value);
            _exerciseToRemoveIndex = null;
        }

        _removeExerciseDialog?.Close();
    }

    private void BeginAddExercise()
    {
        editingExerciseBlueprint = ExerciseBlueprint.Default;
        _editExerciseDialog?.Open();
    }

    private void HandleAddAsNewSession()
    {
        AddSessionToPlan();
        _updatePlanDialog?.Close();
    }

    private void HandleUpdateInPlan()
    {
        UpdateSessionInPlan();
        _updatePlanDialog?.Close();
    }

    private void BeginEditExercise(int index)
    {
        var exercise = Session.RecordedExercises[index];
        _exerciseToEditIndex = index;
        editingExerciseBlueprint = exercise.Blueprint;
        StateHasChanged();
        _editExerciseDialog?.Open();
    }

    private void BeginRemoveExercise(int index)
    {
        _exerciseToRemoveIndex = index;
        _removeExerciseDialog?.Open();
    }

    private RenderFragment? RenderSnackBar()
    {
        var lastRecordedSet = Session.LastExercise?.LastRecordedSet;
        if (ShowRestTimer
            && Session.NextExercise is not null
            && Session.LastExercise is not null
            && lastRecordedSet is { Set : not null } lrs)
        {
            var lastSetFailed = lrs.Set.RepsCompleted < Session.LastExercise.Blueprint.RepsPerSet;

            return @<RestTimer
                        Rest="Session.LastExercise.Blueprint.RestBetweenSets"
                        StartTime="lrs.Set.CompletionTime"
                        Failed="lastSetFailed"/>;
        }
        else if (Session.IsComplete || IsReadonly)
        {
            return @<SnackBar>
                <span class="flex flex-col justify-start">
                    <span class="flex justify-between">
                        <span>This session
                            @if(Username is not null)
                            {
                                <span class="font-bold">@Username</span>
                            } else{
                                @("you");
                            } lifted </span>
                        <span class="font-bold">
                            <WeightFormat Weight="Session.TotalWeightLifted"/>
                        </span>
                    </span>
                </span>
            </SnackBar>;
        }

        return null;
    }

    private void AddSessionToPlan()
    {
        if (Session?.Blueprint is SessionBlueprint blueprint)
        {
            var existingSessionWithSameName = ProgramState.Value.GetActivePlanSessionBlueprints().Any(x => x.Name == blueprint.Name);
            if (existingSessionWithSameName)
            {
                var blueprintNameWithoutNumber = System.Text.RegularExpressions.Regex.Replace(blueprint.Name, @" \(\d+\)$", "");
                var newName = blueprint.Name;
                var i = 1;
                while (ProgramState.Value.GetActivePlanSessionBlueprints().Any(x => x.Name == newName))
                {
                    newName = $"{blueprintNameWithoutNumber} ({i})";
                    i++;
                }

                blueprint = blueprint with { Name = newName };
            }

            Dispatcher.Dispatch(new AddProgramSessionAction(ProgramState.Value.ActivePlanId, blueprint));
            Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget, Session with { Blueprint = blueprint }));
        }
    }

    private void UpdateSessionInPlan()
    {
        if (Session.Blueprint is SessionBlueprint blueprint)
        {
            var blueprintIndex = ProgramState.Value.GetActivePlanSessionBlueprints().Index().First(x => x.Item.Name == blueprint.Name).Index;
            Dispatcher.Dispatch(new SetProgramSessionAction(ProgramState.Value.ActivePlanId, blueprintIndex, blueprint));
        }
    }

    private void SaveSession()
    {
        Dispatcher.Dispatch(new PersistCurrentSessionAction(SessionTarget));
        var id = CurrentSessionState.Value.WorkoutSession?.Id;
        if (Session is not null)
        {
            Dispatcher.Dispatch(new AddUnpublishedSessionIdAction(Session.Id));
        }

        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget, null));
        Dispatcher.Dispatch(new SetStatsIsDirtyAction(true));

        if(ShowRestTimer)
            Dispatcher.Dispatch(new ClearSetTimerNotificationAction());

        Dispatcher.Dispatch(new NavigateAction(NavigateOnClose));
    }

    private void CloseSession()
    {
        Dispatcher.Dispatch(new NavigateAction(NavigateOnClose));
    }

}
