@typeparam TItem

<div @attributes="AdditionalAttributes" class=" @(AdditionalAttributes?.GetValueOrDefault("class")) flex flex-col gap-2 p-2 cardlist">
    @foreach (var item in Items)
    {
        <Card
            class="@CardClass"
            Type="CardType"
            OnLongPress=@(OnLongPress.HasDelegate ? ()=>OnLongPress.InvokeAsync(item) : default!)
            IsHighlighted="ShouldHighlight?.Invoke(item) ?? false"
            OnClick=@(OnClick != null ? () => OnClick(item) : null)>
            @ChildContent?.Invoke(item)
        </Card>
    }
</div>

@code
{
    [EditorRequired] [Parameter] public IEnumerable<TItem> Items { get; set; } = null!;

    [Parameter] public RenderFragment<TItem>? ChildContent { get; set; } = null!;

    [Parameter] public Action<TItem>? OnClick { get; set; }

    [Parameter] public EventCallback<TItem> OnLongPress { get; set; }

    [Parameter] public Func<TItem, bool>? ShouldHighlight { get; set; }

    [Parameter] public string? CardClass { get; set; }

    [Parameter] public Card.CardType CardType { get; set; } = Card.CardType.Outlined;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
}
