@using ApexCharts;
@using LiftLog.Ui.Services;
@using MaterialColorUtilities.Utils;
@using MaterialColorUtilities.Schemes;

@implements IDisposable

@inject IThemeProvider ThemeProvider

@if(ShowTitle){
    <h2 class="text-xl text-on-surface">@(Statistics.Title)</h2>
}
@if(IsLoading)
{
    <div class="flex flex-col justify-center h-full gap-4 text-on-surface">
        <div><md-circular-progress aria-label="Stats progress" indeterminate four-color></md-circular-progress></div>
        <span>
            <p>Loading...</p>
        </span>
    </div>
} else
{
    <ApexChart
        TItem="TimeTrackedStatistic"
        Title=""
        Options="options"
        XAxisType="XAxisType.Datetime">

        <ApexPointSeries TItem="TimeTrackedStatistic"
                            Items="Statistics.Statistics"
                            Name="Weight"
                            SeriesType="SeriesType.Line"
                            XValue="@(e => e.DateTime)"
                            YAggregate="@(e => e.Max(e => e.Value))"
                            OrderByDescending="e=>e.X" />
    </ApexChart>
}
@code {
    [Parameter]
    [EditorRequired]
    public StatisticOverTime Statistics { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    // Loading lots of graphs at once can be slow, so we can delay the rendering of this graph
    public TimeSpan RenderDelay { get; set; }


    [CascadingParameter(Name="UseImperial")]
    public bool UseImperial { get; set; }

    [Parameter]
    public bool ShowTitle { get; set; } = true;


    private bool IsLoading { get; set; } = true;

    private bool _disposed = false;


    private ApexChartOptions<TimeTrackedStatistic> options = null!;

    public void Dispose()
    {
        _disposed = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var scheme = await ThemeProvider.GetColorSchemeAsync();
        options = new ApexChartOptions<TimeTrackedStatistic>
            {
                Chart = new Chart
                {
                    Toolbar = new Toolbar
                    {
                        Show = false
                    },
                    Selection = new(){
                        Enabled = false,
                    },
                    Zoom = new(){
                        Enabled = false,
                    },
                    Animations = new() {
                        Enabled = true,
                        Easing= Easing.Easeout,
                        Speed = 400
                    },
                },
                Stroke = new Stroke
                {
                    Curve = Curve.Straight,
                    Width = 4
                },
                Colors = new() {GetColorString(scheme.Primary)},
                Title = new(){
                    Style = new (){
                        Color = GetColorString(scheme.OnSurface),
                    }
                },
                Xaxis = new(){
                    Labels = new(){
                        Style = new(){
                            Colors = new Color(GetColorString(scheme.OnSurface)),
                        }
                    },
                    AxisBorder = new(){
                        Color = GetColorString(scheme.OutlineVariant),
                    },
                },
                Yaxis = new(){
                      new(){
                        Labels = new(){
                            Style = new(){
                                Colors = new Color(GetColorString(scheme.OnSurface)),
                            },
                            Formatter =$"(value)=>parseFloat(parseFloat(value).toFixed(3)) + ' {WeightSuffix}'",
                        },
                      }
                },
                Tooltip = new(){
                    Enabled =false
                },
                Grid = new(){
                    BorderColor = GetColorString(scheme.OutlineVariant),
                },
                Markers = new(){
                    Size = 2,
                    StrokeColors = new Color(GetColorString(scheme.Primary)),
                    StrokeWidth = 4,
                }
            };

        await Task.Delay(RenderDelay).ContinueWith(_ =>
        {
            if(!_disposed)
            {
                IsLoading = false;
                InvokeAsync(StateHasChanged);
            }
        });
    }

    private string GetColorString(uint color) => "#"+color.ToString("X").Substring(2,6);

    private string WeightSuffix => UseImperial ? " lbs" : " kg";
}
