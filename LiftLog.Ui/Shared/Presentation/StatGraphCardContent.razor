@using ApexCharts;
@using LiftLog.Ui.Services;
@using MaterialColorUtilities.Utils;
@using MaterialColorUtilities.Schemes;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<AppState> AppState
@inject IJSRuntime JSRuntime

<div class="flex flex-col gap-2 items-start" @ref="cardContent" >
@if (ShowTitle)
{
    <ItemTitle Title="@(Title)" />
}
@if (IsLoading)
{
    <Loader />
}
else
{
    <ApexChart
        TItem="TimeTrackedStatistic"
        Title=""
        Options="options"
        Width="@width"
        Height="230"
        XAxisType="XAxisType.Datetime"
        @ref="chart">

        @foreach(var statistics in Statistics)
        {
            <ApexPointSeries TItem="TimeTrackedStatistic"
                Items="statistics.Statistics"
                Name="@statistics.Title"
                SeriesType="SeriesType.Line"
                XValue="@(e => e.DateTime)"
                YAggregate="@(e => e.Max(e => e.Value))"
                OrderByDescending="e => e.X"/>
        }
    </ApexChart>
}
</div>
@code {
    [Parameter] [EditorRequired] public ImmutableListValue<StatisticOverTime> Statistics { get; set; } = null!;

    [Parameter] [EditorRequired] public string Title { get; set; } = string.Empty;

    [Parameter]
    [EditorRequired]
    // Loading lots of graphs at once can be slow, so we can delay the rendering of this graph
    public TimeSpan RenderDelay { get; set; }


    [CascadingParameter(Name = "UseImperial")]
    public bool UseImperial { get; set; }

    [Parameter] public bool ShowTitle { get; set; } = true;

    private bool IsLoading { get; set; } = true;

    private bool _disposed = false;

    private ElementReference cardContent;
    private ApexChart<TimeTrackedStatistic> chart = null!;

    private string width = "100%";



    private ApexChartOptions<TimeTrackedStatistic> options = null!;

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        _disposed = true;
        return base.DisposeAsyncCore(disposing);
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Color LineColors =  new()
        {
            GetColorString(AppState.Value.ColorScheme.Blue),
            GetColorString(AppState.Value.ColorScheme.Green),
            GetColorString(AppState.Value.ColorScheme.Red),
            GetColorString(AppState.Value.ColorScheme.Yellow),
            GetColorString(AppState.Value.ColorScheme.Purple),
            GetColorString(AppState.Value.ColorScheme.Cyan),
            GetColorString(AppState.Value.ColorScheme.Pink),
            GetColorString(AppState.Value.ColorScheme.Indigo),
            GetColorString(AppState.Value.ColorScheme.Teal),
            GetColorString(AppState.Value.ColorScheme.Lime),
            GetColorString(AppState.Value.ColorScheme.Orange),
        };

        options = new ApexChartOptions<TimeTrackedStatistic>
        {
            Chart = new Chart
            {
                Toolbar = new Toolbar
                {
                    Show = false
                },
                Selection = new()
                {
                    Enabled = false,
                },
                Zoom = new()
                {
                    Enabled = false,
                },
                Animations = new()
                {
                    Enabled = true,
                    Easing = Easing.Easeout,
                    Speed = 400
                },
                FontFamily = "Roboto"
            },
            Stroke = new Stroke
            {
                Curve = Curve.Smooth,
                Width = 6
            },
            Colors = LineColors,
            Title = new()
            {
                Style = new()
                {
                    Color = GetColorString(AppState.Value.ColorScheme.OnSurface),
                }
            },
            Xaxis = new()
            {
                Labels = new()
                {
                    Style = new()
                    {
                        Colors = new Color(GetColorString(AppState.Value.ColorScheme.OnSurface)),
                    },
                    DatetimeUTC = false,
                },
                AxisBorder = new()
                {
                    Color = GetColorString(AppState.Value.ColorScheme.OutlineVariant),
                },
            },
            Yaxis = new()
            {
                new()
                {
                    Labels = new()
                    {
                        Style = new()
                        {
                            Colors = new Color(GetColorString(AppState.Value.ColorScheme.OnSurface)),
                        },
                        Formatter = $"(value)=>parseFloat(parseFloat(value).toFixed(3)) + ' {WeightSuffix}'",
                    },
                }
            },
            Tooltip = new()
            {
                Enabled = true,
            },
            Grid = new()
            {
                BorderColor = GetColorString(AppState.Value.ColorScheme.OutlineVariant),
            },
            Markers = new()
            {
                Size = 6,
                StrokeColors = LineColors,
                StrokeWidth = 4,
            },
            Legend = new()
            {
                Show = true,
                Labels = new()
                {
                    Colors = GetColorString(AppState.Value.ColorScheme.OnSurface)
                }
            }
        };

        await Task.Delay(RenderDelay).ContinueWith(_ =>
        {
            if (!_disposed)
            {
                IsLoading = false;
                InvokeAsync(StateHasChanged);
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var cardContentWidth = await JSRuntime.InvokeAsync<double>("AppUtils.getWidth", cardContent);
            width = $"{cardContentWidth}px";
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private string GetColorString(uint color) => "#" + color.ToString("X").Substring(2, 6);

    private string WeightSuffix => UseImperial ? " lbs" : " kg";
}
<style>

  .apexcharts-tooltip {
    background: @GetColorString(AppState.Value.ColorScheme.Surface) !important;
    color: @GetColorString(AppState.Value.ColorScheme.OnSurface) !important;
    border-color: @GetColorString(AppState.Value.ColorScheme.OutlineVariant)!important;
    box-shadow: none !important;
  }

  .apexcharts-tooltip-series-group{
    background: @GetColorString(AppState.Value.ColorScheme.Surface) !important;
    border-color: @GetColorString(AppState.Value.ColorScheme.Outline)!important;
  }

  .apexcharts-tooltip-title{
    background: @GetColorString(AppState.Value.ColorScheme.SurfaceContainer) !important;
    border-color: @GetColorString(AppState.Value.ColorScheme.OutlineVariant)!important;
    border-bottom: none!important;
  }

  .apexcharts-xaxistooltip {
    background: @GetColorString(AppState.Value.ColorScheme.Surface) !important;
    color: @GetColorString(AppState.Value.ColorScheme.OnSurface) !important;
    border-color: @GetColorString(AppState.Value.ColorScheme.OutlineVariant)!important;
    box-shadow: none !important;
  }
  .apexcharts-xaxistooltip:before, .apexcharts-xaxistooltip:after {
    border-bottom-color: @GetColorString(AppState.Value.ColorScheme.OutlineVariant)!important;
  }
</style>
