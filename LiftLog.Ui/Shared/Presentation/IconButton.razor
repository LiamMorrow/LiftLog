@switch (Type)
{
    case IconButtonType.Standard:
        <md-icon-button
            @attributes="AdditionalAttributes"
            class="pointer-events-auto"
            @onclick="OnClick" @onclick:stopPropagation="true" @onclick:preventDefault="true"
            disabled=@Disabled >
            <md-icon>@Icon</md-icon>
        </md-icon-button>
        break;
    case IconButtonType.Filled:
        <md-filled-icon-button
            @attributes="AdditionalAttributes"
            class="pointer-events-auto"
            @onclick="OnClick" @onclick:stopPropagation="true" @onclick:preventDefault="true"
            disabled=@Disabled >
            <md-icon>@Icon</md-icon>
        </md-filled-icon-button>
        break;
    case IconButtonType.FilledTonal:
        <md-filled-tonal-icon-button
            @attributes="AdditionalAttributes"
            class="pointer-events-auto"
            @onclick="OnClick" @onclick:stopPropagation="true" @onclick:preventDefault="true"
            disabled=@Disabled >
            <md-icon>@Icon</md-icon>
        </md-filled-tonal-icon-button>
        break;
    case IconButtonType.Outlined:
        <md-outlined-icon-button
            @attributes="AdditionalAttributes"
            class="pointer-events-auto"
            @onclick="OnClick" @onclick:stopPropagation="true" @onclick:preventDefault="true"
            disabled=@Disabled
            >
            <md-icon>@Icon</md-icon>
        </md-outlined-icon-button>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}


@code {

    [EditorRequired] [Parameter] public string Icon { get; set; } = null!;

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter] public IconButtonType Type { get; set; } = IconButtonType.Filled;

    [Parameter] public bool Disabled { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
}
