@using LiftLog.Ui.Util

@if(!Session.RecordedExercises.Any())
{
    <div class="flex flex-col justify-center items-center gap-4 text-on-surface">
        <md-icon>info</md-icon>
        <span>
            <p>Session contains no exercises.</p>
        </span>
    </div>
}
else
{
    <CardList Items="Session.RecordedExercises.IndexedTuples()">
        <WeightedExercise
            @key=context.Index
            RecordedExercise="context.Item"
            ToStartNext=@(Session.NextExercise == context.Item)
            CycleRepCountForSet=CycleRepCountForExerciseSet(context.Index)
            ClearRepCountForSet=ClearRepCountForExerciseSet(context.Index)
            UpdateWeightForExercise=UpdateWeightForExerciseWrapper(context.Index)
            PreviousRecordedExercises=@(PreviouslyCompleted.GetValueOrDefault(context.Item.Blueprint, []))
            ToggleExercisePerSetWeight=@(() =>ToggleExercisePerSetWeight(context.Index))
            UpdateWeightForSet=@((setIndex, weight) => UpdateWeightForSet(context.Index, setIndex, weight))
            UpdateNotesForExercise=@((notes)=>UpdateNotesForExercise(context.Index, notes))
            OnEditExercise=@(() => BeginEditExercise(context.Index))
            OnRemoveExercise=@(()=> BeginRemoveExercise(context.Index)) />
    </CardList>
}
@if (ShowBodyweight)
{
    <div class="flex-col flex justify-center gap-2 mt-2">
        <Card>
            <div class="flex justify-between items-center">
                <span class="text-xl">Bodyweight</span>
                <WeightDisplay AllowNull=true Weight=Session.Bodyweight UpdateWeight="UpdateBodyweight" Increment="0.1m" Label="Bodyweight" />
            </div>
        </Card>
    </div>
}

<div class="flex  justify-center gap-2 mt-6">
    <AppButton OnClick="BeginAddExercise"><md-icon slot="icon">add</md-icon>Add Exercise</AppButton>
    @if (!SessionInPlan && Session.RecordedExercises.Any())
    {
        <AppButton Type="AppButtonType.Secondary" OnClick="@(()=>_updatePlanDialog?.Open())"><md-icon
                slot="icon">assignment_add</md-icon>Update Plan
        </AppButton>
    }
</div>

@if (Session.RecordedExercises.Any())
{
    <FloatingBottomContainer>
        <Fab>
            <FloatingButton variant="secondary" has-icon OnClick=SaveSession Label="Save"><md-icon slot="icon">save</md-icon>
            </FloatingButton>
        </Fab>
        <AdditionalContent>@RenderSnackBar()</AdditionalContent>
    </FloatingBottomContainer>
}

<Dialog @ref="_editExerciseDialog" OnClose=@(()=> _exerciseToEditIndex = null)>
    <span slot="headline">@(_exerciseToEditIndex is null ? "Add" : "Edit") Exercise</span>
    <div slot="content">
        <SessionExerciseEditor Exercise=_editingExercise ExerciseNames="ExerciseNames" OnExerciseUpdate=@((e) =>
            {_editingExercise = e; StateHasChanged();} ) />
    </div>
    <div slot="actions" data-cy="session-exercise-editor-actions">
        <AppButton Type="AppButtonType.Text" OnClick="()=>{_editExerciseDialog?.Close(); }">Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="EditExerciseHandler">Save</AppButton>
    </div>
</Dialog>

<Dialog @ref="_removeExerciseDialog">
    <span slot="headline">Remove Exercise?</span>
    <span slot="content" class="block text-left">Exercise will be removed from the current session, future sessions will
        not be impacted.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" slot="footer" OnClick="()=>{_removeExerciseDialog?.Close();}">Cancel
        </AppButton>
        <AppButton Type="AppButtonType.Text" slot="footer" OnClick="RemoveExerciseHandler">Remove</AppButton>
    </div>
</Dialog>

<Dialog @ref="_updatePlanDialog">
    <span slot="headline">Update Plan</span>
    <span slot="content" class="block text-left">The plan will be updated with the current session's exercises.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" slot="footer" OnClick="HandleAddAsNewSession">Add as new session</AppButton>
        @if(SessionWithSameNameInPlan){
            <AppButton Type="AppButtonType.Text" slot="footer" OnClick="HandleUpdateInPlan">
                Update "@Session.Blueprint.Name"
            </AppButton>
        }
    </div>
</Dialog>

@code {

    private SessionExerciseEditModel _editingExercise = new SessionExerciseEditModel(
        Name: "",
        Sets: 3,
        Reps: 10,
        Weight: 0
        );
    private int? _exerciseToEditIndex;
    private int? _exerciseToRemoveIndex;
    private Dialog? _editExerciseDialog;
    private Dialog? _removeExerciseDialog;
    private Dialog? _updatePlanDialog;

    [EditorRequired]
    [Parameter]
    public Session Session { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public ImmutableDictionary<KeyedExerciseBlueprint, ImmutableListValue<DatedRecordedExercise>> PreviouslyCompleted { get; set; } = null!;

    [Parameter]
    public bool ShowRestTimer { get; set; } = true;

    [EditorRequired]
    [Parameter]
    public Action<int, int> CycleRepcountForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, int> ClearRepCountForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, decimal> UpdateWeightForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, string?> UpdateNotesForExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int> ToggleExercisePerSetWeight { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int,int,decimal> UpdateWeightForSet { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<decimal?> UpdateBodyweight { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int, SessionExerciseEditModel> EditExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<SessionExerciseEditModel> AddExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<int> RemoveExercise { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action SaveSession { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action CloseSession { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public ImmutableListValue<string> ExerciseNames { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public bool SessionInPlan { get; set; }

    [Parameter]
    [EditorRequired]
    public bool SessionWithSameNameInPlan { get; set; }

    [Parameter]
    [EditorRequired]
    public Action AddSessionToPlan { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Action UpdateSessionInPlan { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public bool ShowBodyweight { get; set; }

    private Action<int> CycleRepCountForExerciseSet(int exerciseIndex)
        => (int set) => CycleRepcountForExercise(exerciseIndex, set);


    private Action<int> ClearRepCountForExerciseSet(int exerciseIndex)
        => (int set) => ClearRepCountForExercise(exerciseIndex, set);

    private Action<decimal> UpdateWeightForExerciseWrapper(int exerciseIndex)
        => (decimal weight) => UpdateWeightForExercise(exerciseIndex, weight);



    private void EditExerciseHandler()
    {
        if (_editingExercise is not null)
        {
            if (_exerciseToEditIndex is not null)
            {
                EditExercise(_exerciseToEditIndex.Value, _editingExercise);
                _exerciseToEditIndex = null;
            }
            else
            {
                AddExercise(_editingExercise);
            }
        }
        _editExerciseDialog?.Close();
    }
    private void RemoveExerciseHandler()
    {
        if (_exerciseToRemoveIndex is not null)
        {
            RemoveExercise(_exerciseToRemoveIndex.Value);
            _exerciseToRemoveIndex = null;
        }
        _removeExerciseDialog?.Close();
    }

    private void BeginAddExercise()
    {
        _editingExercise = new SessionExerciseEditModel(
            Name: "",
            Sets: 3,
            Reps: 10,
            Weight: 0
            );
        _editExerciseDialog?.Open();
    }

    private void HandleAddAsNewSession()
    {
        AddSessionToPlan();
        _updatePlanDialog?.Close();
    }

    private void HandleUpdateInPlan()
    {
        UpdateSessionInPlan();
        _updatePlanDialog?.Close();
    }

    private void BeginEditExercise(int index)
    {
        var exercise = Session.RecordedExercises[index];
        _exerciseToEditIndex = index;
        _editingExercise = new SessionExerciseEditModel(
            exercise.Blueprint.Name,
            exercise.Blueprint.Sets,
            exercise.Blueprint.RepsPerSet,
            exercise.Weight);
        StateHasChanged();
        _editExerciseDialog?.Open();
    }

    private void BeginRemoveExercise(int index)
    {
        _exerciseToRemoveIndex = index;
        _removeExerciseDialog?.Open();
    }

    private RenderFragment? RenderSnackBar()
    {
        var lastRecordedSet = Session.LastExercise?.LastRecordedSet;
        if (ShowRestTimer && Session.NextExercise is not null && Session.LastExercise is not null && lastRecordedSet is {Set : {}} lrs)
        {
            var lastSetFailed = lrs.Set.RepsCompleted < Session.LastExercise.Blueprint.RepsPerSet;

            return @<RestTimer
                Rest=Session.LastExercise.Blueprint.RestBetweenSets
                StartTime=lrs.Set.CompletionTime
                Failed=lastSetFailed />;
        }
        else if (Session.IsComplete)
        {
            return @<SnackBar>
                <span class="flex flex-col justify-start">
                    <span class="flex justify-between">
                        <span>This session you lifted </span><span class="font-bold"><WeightFormat Weight="Session.TotalWeightLifted" /></span>
                    </span>
                    <span class="flex justify-between">
                        <WeightToObjectComparison Weight="Session.TotalWeightLifted"/>
                    </span>
                </span>
                </SnackBar>;
        }
        return null;
    }

}
