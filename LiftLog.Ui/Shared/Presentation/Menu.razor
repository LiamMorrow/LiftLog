@inject IJSRuntime JSRuntime


@*Scrim*@
@if(_open && ShowScrim){
    <div class="fixed z-20 bg-transparent top-0 right-0 left-0 bottom-0 menu-scrim"
        @onclick:stopPropagation="true" @onclick:preventDefault="true"
        @onpointerdown:preventDefault="true" @onpointerdown:stopPropagation="true"
        @onpointerdown=@(_=>JSRuntime.InvokeVoidAsync("AppUtils.callOn", menu, "close"))></div>
}
<md-menu @attributes="AdditionalAttributes" class="text-start" positioning="popover" @ref="menu" @ondialog-close=@(()=>{_open = false;StateHasChanged();}) >
    @ChildContent
</md-menu>
@code {
    private bool _open = false;

    private ElementReference menu;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public bool ShowScrim { get; set; } = true;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            await JSRuntime.InvokeVoidAsync("AppUtils.onClosedMenu", menu);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Open()
    {
        _open = true;
        JSRuntime.InvokeVoidAsync("AppUtils.callOn", menu, "show");
    }

    public void Close()
    {
        _open = false;
        JSRuntime.InvokeVoidAsync("AppUtils.callOn", menu, "close");
    }


}
