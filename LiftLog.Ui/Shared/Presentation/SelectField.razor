@inject IJSRuntime JsRuntime

@switch(TextFieldType){
    case TextFieldType.Outlined:
        <md-outlined-select @attributes="AdditionalAttributes" @onchange="e=>ValueChanged.InvokeAsync((string)e.Value!)" >
            @foreach (var option in Options)
            {
                <md-select-option selected=@(option.Value == Value) value="@option.Value">
                    <div slot="headline">@option.Title</div>
                </md-select-option>
            }
        </md-outlined-select>
        break;
    case TextFieldType.Filled:
        <md-filled-select @attributes="AdditionalAttributes" @onchange="e=>ValueChanged.InvokeAsync((string)e.Value!)">
            @foreach (var option in Options)
            {
                <md-select-option selected=@(option.Value == Value) value="@option.Value">
                    <div slot="headline">@option.Title</div>
                </md-select-option>
            }
        </md-filled-select>
        break;
    default:
        throw new ArgumentOutOfRangeException(nameof(TextFieldType), TextFieldType, null);

}


@code {
    [Parameter] [EditorRequired] public string Value { get; set; } = default!;

    [Parameter] [EditorRequired] public List<SelectOption> Options { get; set; } = null!;

    [Parameter] [EditorRequired] public EventCallback<string> ValueChanged { get; set; }

    [Parameter] public TextFieldType TextFieldType { get; set; } = TextFieldType.Outlined;

    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    public record SelectOption(string Title, string Value);
}
