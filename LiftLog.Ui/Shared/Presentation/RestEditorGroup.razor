<div class="flex flex-col items-start gap-5 text-on-surface">
    <span class="text-lg">Rest</span>
    <div class="w-full flex justify-center">
        <md-outlined-segmented-button-set>
            <md-outlined-segmented-button @onsegmented-button-interaction="HandleSelectedChanged(Rest.Short)"  selected="@(!_isCustom && Rest == Rest.Short)" label="@UiStrings.RestShort"></md-outlined-segmented-button>
            <md-outlined-segmented-button @onsegmented-button-interaction="HandleSelectedChanged(Rest.Medium)" selected="@(!_isCustom && Rest == Rest.Medium)" label="@UiStrings.RestMedium"></md-outlined-segmented-button>
            <md-outlined-segmented-button @onsegmented-button-interaction="HandleSelectedChanged(Rest.Long)"   selected="@(!_isCustom && Rest == Rest.Long)" label="@UiStrings.RestLong"></md-outlined-segmented-button>
            <md-outlined-segmented-button @onsegmented-button-interaction="HandleCustomSelectedChanged"        selected="@(_isCustom)" label="@UiStrings.Custom"></md-outlined-segmented-button>
        </md-outlined-segmented-button-set>
    </div>
    @if (_isCustom)
    {
        <div class="flex flex-col w-full items-center justify-between gap-2">
            <RestEditor Label="@UiStrings.MinRest" Rest="Rest.MinRest" OnRestUpdated="rest => OnRestUpdated(Rest with { MinRest = rest })"></RestEditor>
            <RestEditor Label="@UiStrings.MaxRest" Rest="Rest.MaxRest" OnRestUpdated="rest => OnRestUpdated(Rest with { MaxRest = rest })"></RestEditor>
            <RestEditor Label="@UiStrings.FailureRest" Rest="Rest.FailureRest" OnRestUpdated="rest => OnRestUpdated(Rest with { FailureRest = rest })"></RestEditor>
        </div>
    }
    else
    {
        <div class="w-full text-start">
            <RestFormat Rest="Rest" />
        </div>
    }
</div>

@code {

    private bool _isCustom;

    [EditorRequired] [Parameter] public Action<Rest> OnRestUpdated { get; set; } = null!;

    [EditorRequired] [Parameter] public Rest Rest { get; set; } = null!;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _isCustom = Rest != Rest.Short && Rest != Rest.Medium && Rest != Rest.Long;
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    private Action HandleSelectedChanged(Rest rest)
    {
        return () =>
        {
            _isCustom = false;
            OnRestUpdated?.Invoke(rest);
        };
    }

    private void HandleCustomSelectedChanged()
    {
        _isCustom = true;
        StateHasChanged();
    }

}
