@using System.Globalization


@{
    var firstDayOfMonth = new DateOnly(CurrentYear, CurrentMonth, 1);
    var dayOfFirstDayOfTheMonth = (int)firstDayOfMonth.DayOfWeek;
    var firstDayOfWeek = CultureInfo.DefaultThreadCurrentCulture != null ? CultureInfo.DefaultThreadCurrentCulture.DateTimeFormat.FirstDayOfWeek : DayOfWeek.Sunday;
    var dayOfFirstDayOfTheWeek = (int)firstDayOfWeek;

    int numberOfDaysToShowFromPreviousMonth;
    //Handles the case where first day of the month is the day the week starts on
    if(dayOfFirstDayOfTheWeek == dayOfFirstDayOfTheMonth) {
        numberOfDaysToShowFromPreviousMonth = 0;
    //If the first day of the week for the culture is Sunday, the following math is unnecessary
    } else if(firstDayOfWeek != DayOfWeek.Sunday) {
        //This is an edge case specifically for starting the week on Monday. Sunday = 0 so the numberOfDaysToShowFromPreviousMonth was negative
        //Also happens to work if the culture starts the week on Saturday since 0 + 1 = 7 - 6 so no check for that is needed
        if(firstDayOfMonth.DayOfWeek == DayOfWeek.Sunday) {
            numberOfDaysToShowFromPreviousMonth = 7 - dayOfFirstDayOfTheWeek;
        } else {
            numberOfDaysToShowFromPreviousMonth = firstDayOfWeek == DayOfWeek.Monday ? dayOfFirstDayOfTheMonth - 1 : dayOfFirstDayOfTheMonth + 1;
        }
    } else {
        numberOfDaysToShowFromPreviousMonth = dayOfFirstDayOfTheMonth;
    }
    var index = 0;
}
<div class="grid grid-cols-7 gap-2 justify-center items-center">
    <div class="col-span-1 my-2">
        <IconButton data-cy="calendar-nav-previous-month" Type=IconButtonType.Standard @onclick="PreviousMonth" Icon="chevron_left" />
    </div>
    <div class="col-span-5 flex my-2 justify-center items-center">
        <h2 data-cy="calendar-month">@DateTimeFormatInfo.CurrentInfo.GetMonthName(CurrentMonth) @CurrentYear</h2>
    </div>
    <div class="col-span-1 my-2 text-end">
        <IconButton Type=IconButtonType.Standard @onclick="NextMonth" disabled=@DisableNext Icon="chevron_right" />
    </div>
    @if(firstDayOfWeek != DayOfWeek.Sunday)
    {
        @if(firstDayOfWeek == DayOfWeek.Monday ) 
        {
            <span class="mb-2">@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Monday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Tuesday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Wednesday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Thursday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Friday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Saturday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Sunday))</span>
        }
        else if(firstDayOfWeek == DayOfWeek.Saturday) 
        {
            <span class="mb-2">@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Saturday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Sunday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Monday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Tuesday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Wednesday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Thursday))</span>
            <span>@(DateTimeFormatInfo.CurrentInfo.GetShortestDayName(DayOfWeek.Friday))</span>

        }
    } 
    @for (int i = -numberOfDaysToShowFromPreviousMonth; i < 0; i++)
    {
        var date = firstDayOfMonth.AddDays(i);
        <HistoryCalendarDay ForOtherMonth=true @key=@(date.ToString()+index) Index="index++" Day=date Sessions=_sessionsByDate[date] OnDayClick=@(()=>HandleDayClick(date)) OnDayLongPress=@(()=>HandleDayLongPress(date)) />
    }
    @for (int i = 1; i <= DateTime.DaysInMonth(CurrentYear, CurrentMonth); i++)
    {
        var date = new DateOnly(CurrentYear, CurrentMonth, i);

        <HistoryCalendarDay @key=@(date.ToString()+index) Index="index++" Day=date Sessions=_sessionsByDate[date] OnDayClick=@(()=>HandleDayClick(date)) OnDayLongPress=@(()=>HandleDayLongPress(date)) />
    }

@{var extraDay =0;}
    @while(index % 7 != 0)
    {
        var date =new DateOnly(CurrentYear, CurrentMonth, DateTime.DaysInMonth(CurrentYear, CurrentMonth)).AddDays(++extraDay);
        <HistoryCalendarDay ForOtherMonth=true @key=@(date.ToString()+index) Index="index++" Day=date Sessions=_sessionsByDate[date] OnDayClick=@(()=>HandleDayClick(date)) OnDayLongPress=@(()=>HandleDayLongPress(date)) />
    }

</div>

@code {
    [Parameter][EditorRequired] public int CurrentMonth {get;set;}
    [Parameter][EditorRequired] public int CurrentYear {get;set;}

    private ILookup<DateOnly, Session> _sessionsByDate = null!;

    private bool DisableNext => CurrentYear == DateTime.Now.Year && CurrentMonth == DateTime.Now.Month;

    [Parameter]
    [EditorRequired]
    public IReadOnlyList<Session> Sessions { get; set; } = [];

    [Parameter]
    [EditorRequired]
    public EventCallback<Session> OnSessionClick { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<Session> OnSessionLongPress { get; set; }

    [Parameter]
    public EventCallback<DateOnly> OnDateSelect { get; set; }

    [Parameter]
    public EventCallback<DateOnly> OnMonthChange { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _sessionsByDate = Sessions.ToLookup(s => s.Date);
    }

    private void NextMonth()
    {
        if(DisableNext){
            return;
        }
        if (CurrentMonth == 12)
        {
            CurrentMonth = 1;
            CurrentYear++;
        }
        else
        {
            CurrentMonth++;
        }
        OnMonthChange.InvokeAsync(new DateOnly(CurrentYear, CurrentMonth, 1));
    }

    private void PreviousMonth()
    {
        if (CurrentMonth == 1)
        {
            CurrentMonth = 12;
            CurrentYear--;
        }
        else
        {
            CurrentMonth--;
        }

        OnMonthChange.InvokeAsync(new DateOnly(CurrentYear, CurrentMonth, 1));
    }

    private void GoToToday()
    {
        CurrentMonth = DateTime.Now.Month;
        CurrentYear = DateTime.Now.Year;
    }

    private async Task HandleDayLongPress(DateOnly date)
    {
        var sessions = _sessionsByDate[date];
        if (sessions.Any())
        {
            await OnSessionLongPress.InvokeAsync(sessions.First());
        }
    }

    private async Task HandleDayClick(DateOnly date)
    {
        var sessions = _sessionsByDate[date];
        if (sessions.Any())
        {
            await OnSessionClick.InvokeAsync(sessions.First());
        }else{
            await OnDateSelect.InvokeAsync(date);
        }
    }

}
