<LabelledForm>
    <GenderSelector OnGenderSelect="OnGenderSelect" Value="attributes.Gender"/>
    <WeightSelector OnWeightSelect="OnWeightSelect" Value="@(Decimal.Parse(attributes.WeightRange.Split("-")[0]))"/>
    <AgeSelector OnAgeSelect="OnAgeSelect" Value="attributes.Age"/>
    <NumberOfDaysSelector OnNumberOfDaysSelect="OnNumberOfDaysSelect" Value="@attributes.DaysPerWeek"/>
    <GoalsSelector OnGoalsSelected="OnGoalsSelected" Value="@attributes.Goals" />
    <ExperienceLevelSelector OnExperienceSelect="OnExperienceSelect" Value="@attributes.Experience"/>
    <AdditionalInfoInput OnUpdateAdditionalInfo="OnUpdateAdditionalInfo" Value="@attributes.AdditionalInfo"/>
</LabelledForm>

@if (ValidationError is not null)
{
    <span class="flex items-center justify-center gap-2 my-4">
        <md-icon>info</md-icon>@ValidationError
    </span>
}

@if(IsInActiveScreen)
{
    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="TrailingTitleButton">
        <AppButton class="text-lg" Type=AppButtonType.Text OnClick=OnGenerate Disabled="ValidationError is not null">@UiStrings.Generate</AppButton>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
}

@code
{
    private AiWorkoutAttributes attributes = new AiWorkoutAttributes(Gender.PreferNotToSay, "70-70", 28, 0, new ImmutableListValue<string>(), Experience.Beginner, false, "");
    [Parameter] [EditorRequired] public Action<AiWorkoutAttributes> OnAttributesSelected { get; set; } = null!;

    [CascadingParameter(Name = "IsInActiveScreen")]
    public bool IsInActiveScreen { get; set; }

    private void OnGenderSelect(Gender gender)
    {
        attributes = attributes with { Gender = gender };
        StateHasChanged();
    }

    private void OnWeightSelect(decimal weight)
    {
        attributes = attributes with { WeightRange = weight.ToString()+"-"+weight.ToString() };
        StateHasChanged();
    }

    private void OnAgeSelect(int age)
    {
        attributes = attributes with { Age = age };
    }

    private void OnNumberOfDaysSelect(int numberOfDays)
    {
        attributes = attributes with { DaysPerWeek = numberOfDays };
        StateHasChanged();
    }

    private void OnGoalsSelected(ImmutableListValue<string> goals)
    {
        attributes = attributes with { Goals = goals };
        StateHasChanged();
    }

    private void OnExperienceSelect(Experience experience)
    {
        attributes = attributes with { Experience = experience };
        StateHasChanged();
    }

    private void OnUpdateAdditionalInfo(string info)
    {
        attributes = attributes with { AdditionalInfo = info };
        StateHasChanged();
    }

    private void OnGenerate()
    {
        if(ValidationError is not null)
        {
            return;
        }
        OnAttributesSelected(attributes);
    }

    private LocalizedString? ValidationError => attributes switch
    {
        {DaysPerWeek: 0} => UiStrings.SelectNumberOfDays,
        {Goals.Count: 0} => UiStrings.SelectAtLeastOneGoal,
        _ => null
    };

}
