@inject IJSRuntime JsRuntime
@inject IHapticFeedbackService HapticFeedback

<div
    class="@(AdditionalAttributes?.GetValueOrDefault("class")) @(HasPadding ?"p-5":"") relative @Style rounded-card text-on-surface card"
    @onpointercancel=OnPointerLeave
    @onpointerdown="OnPointerDown"
    @onpointerleave="OnPointerLeave"
    @onclick="OnPointerUp"
    @oncontextmenu:preventDefault=true
    >

    @if (OnClick != null)
    {
        <md-ripple></md-ripple>
    }
    <md-elevation style="--md-elevation-level: @(Type == CardType.Elevated ? 1 : 0);"></md-elevation>
    @ChildContent
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    [Parameter] public Action? OnClick { get; set; }

    [Parameter] public EventCallback OnLongPress { get; set; }

    [Parameter] public bool IsHighlighted { get; set; }

    [Parameter] public CardType Type { get; set;  } = CardType.Outlined;

    [Parameter] public bool HasPadding { get; set; } = true;

    private string Style => Type switch
    {
        CardType.Outlined when IsHighlighted => "border border-2 border-primary bg-surface",
        CardType.Outlined when !IsHighlighted => "border border-outline-variant bg-surface",
        CardType.Filled => "bg-surface-container-highest",
        CardType.Elevated => "bg-surface-container-low",
        _ => "",
    };

    private DateTime? _lastPointerDownTime;
    private DateTime? _holdTime;

    private async Task HandleOnClick()
    {
        OnClick?.Invoke();
    }

    public enum CardType
    {
        Outlined,
        Filled,
        Elevated
    }


    async Task HandleLongPress()
    {
        await HapticFeedback.PerformAsync(HapticFeedbackType.LongPress);
        await OnLongPress.InvokeAsync();
    }

    private async void OnPointerDown(PointerEventArgs args)
    {
        _lastPointerDownTime = DateTime.Now;
        await Task.Delay(400);
        if (_lastPointerDownTime is null || _lastPointerDownTime.Value.AddMilliseconds(400) > DateTime.Now) return;
        _holdTime = DateTime.Now;
        _lastPointerDownTime = null;
        await HandleLongPress();
        _holdTime = null;
    }


    private void OnPointerLeave(PointerEventArgs args)
    {
        _holdTime = null;
        _lastPointerDownTime = null;
    }

    private async void OnPointerUp(MouseEventArgs args)
    {
        // On desktop holding down opens a right click menu - so this does not fire
        // This results in needing to click the repcount twice after cycling.  Not an issue on mobile
        if (_holdTime is null)
        {
            await HandleOnClick();
        }
        _holdTime = null;
        _lastPointerDownTime = null;
    }
}
