@inject IJSRuntime JSRuntime

@if (opened)
{
    @* Put the dialog into a section in the main layout so that the scrim covers parent elements on ios *@
    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="@SectionName">
        <md-dialog
            @ondialog-close="HandleDialogClose"
            @ondialog-cancel="HandleDialogCancel"
            @attributes="AdditionalAttributes"
            @ref="dialog">
            @ChildContent
        </md-dialog>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
}

@code
{
    private bool opened = false;
    private ElementReference dialog;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public Action? OnClose { get; set; }

    [Parameter] public Action? OnCancel { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public string SectionName { get; set; } = "Dialog";

    [Parameter] public bool PreventCancel { get; set; } = false;

    public async void Open()
    {
        opened = true;
        StateHasChanged();
        await Task.Yield();
        await JSRuntime.InvokeVoidAsync("AppUtils.onCloseMdPopup", dialog, PreventCancel);
        await JSRuntime.InvokeVoidAsync("AppUtils.showMdPopup", dialog);
    }

    public async void Close()
    {
        await CloseWait();
    }

    public async Task CloseWait()
    {
        if(!opened)
        {
            return;
        }
        await JSRuntime.InvokeVoidAsync("AppUtils.hideMdPopup", dialog);
    }

    private async Task HandleDialogClose()
    {
        await Task.Delay(500);
        opened = false;
        await InvokeAsync(StateHasChanged);
        OnClose?.Invoke();
    }

    private void HandleDialogCancel()
    {
        OnCancel?.Invoke();
    }
}
