@typeparam T

@switch(Value)
{
    case { IsNotAsked: true }:
        @(NotAsked ?? Loading ?? (@<Loader/>))
        break;
    case { IsLoading: true }:
        @(Loading ?? (@<Loader/>))
        break;
    case { IsError: true }:
        if(Error is not null)
        {
            @Error(Value)
        }
        else
        {
            <div class="my-auto flex flex-col items-center gap-4 text-on-surface">
                <md-icon>error</md-icon>
                <div>
                    <p>@Value.Error</p>
                    @if(Retry is not null)
                    {
                        <AppButton Type=AppButtonType.Text OnClick=Retry>Retry</AppButton>
                    }
                </div>
            </div>
        }
        break;
    case { IsSuccess: true }:
        @ChildContent(Value.Data)
        break;
}

@code {
    [Parameter]
    [EditorRequired]
    public RemoteData<T> Value { get; set; } = RemoteData.NotAsked;

    [Parameter]
    [EditorRequired]
    public RenderFragment<T> ChildContent { get; set; } = default!;

    [Parameter]
    public RenderFragment<RemoteData<T>>? Error { get; set; } = default!;

    [Parameter]
    public RenderFragment? Loading { get; set; } = default!;

    [Parameter]
    public RenderFragment? NotAsked { get; set; } = default!;

    [Parameter]
    public Action? Retry { get; set; } = default!;
}
