@{
    var displayedExercise = RecordedExercise;
    var setToStartNext = RecordedExercise.PotentialSets.IndexOf(x => x.Set is null);
    var previousNotes = PreviousRecordedExercises?.FirstOrDefault()?.RecordedExercise?.Notes ?? "";
    var thisNotes = RecordedExercise.Notes ?? "";
    var blueprintNotes = RecordedExercise.Blueprint.Notes;
}
<div class="flex flex-col gap-4 py-4 pl-7 pr-2 w-full" data-cy="weighted-exercise">
    <div class="flex flex-col">
        <div class="flex justify-between">
            <ItemTitle Title="@RecordedExercise.Blueprint.Name" />
            @if(!IsReadonly)
            {
                <div class="flex justify-end">
                    @if(ShowPreviousButton)
                    {
                        <IconButton data-cy="prev-exercise-btn" Type="IconButtonType.Standard" Icon="history" OnClick="ShowPrevious"/>
                    }
                    <IconButton data-cy="per-rep-weight-btn" Type=IconButtonType.Standard Icon=weight OnClick="ToggleExercisePerSetWeight"></IconButton>
                    <div>
                        <IconButton data-cy="more-exercise-btn" class="self-end" Type="IconButtonType.Standard" OnClick="() => { _menu?.Open(); }" Icon="more_horiz" id="@moreButtonId"/>
                        <Menu @ref="_menu" anchor="@moreButtonId">
                            <MenuItem Label="Edit" Icon="edit" data-cy="exercise-edit-menu-button" OnClick="OnEditExercise"/>
                            <MenuItem data-cy="exercise-notes-btn" Label="Notes" Icon="notes" OnClick="OnOpenNotesButtonClick"/>
                            <MenuItem Label="Remove" Icon="delete" OnClick="OnRemoveExercise"/>
                        </Menu>
                    </div>
                </div>
            }
            else
            {
                <div class="h-[40px]">
                </div>
            }
        </div>
        <div class="self-start -m-3 -mt-6">
            <WeightDisplay
                Weight="displayedExercise.Weight"
                Increment="displayedExercise.Blueprint.WeightIncreaseOnSuccess"
                UpdateWeight="w => { if (w is not null) UpdateWeightForExercise(w.Value); }"
                IsReadonly="IsReadonly"/>
        </div>
    </div>
    <div class="flex justify-start flex-wrap gap-2">
        @foreach (var (set, i) in displayedExercise.PotentialSets.IndexedTuples())
        {
            <PotentialSetCounter
                @key=i
                Set="set"
                ShowWeight=displayedExercise.PerSetWeight
                MaxReps="displayedExercise.Blueprint.RepsPerSet"
                WeightIncrement="displayedExercise.Blueprint.WeightIncreaseOnSuccess"
                OnTap=@(() => {if(!IsReadonly) CycleRepCountForSet(i);})
                OnHold=@(() => {if(!IsReadonly) ShowAdditionalActionsForSet(i);})
                OnUpdateWeight=@((weight) => {if(!IsReadonly) UpdateWeightForSet(i, weight);})
                ToStartNext=@(ToStartNext && setToStartNext == i && !IsReadonly)
                IsReadonly=@IsReadonly />
        }
    </div>
    @if((blueprintNotes, previousNotes, thisNotes) is not ("", "", ""))
    {
        <Card Type=Card.CardType.Filled class="grid grid-cols-[min-content_1fr] mr-5 gap-2 text-left">
            <md-icon>notes</md-icon>
            <div class="flex flex-col gap-1">
                @if (blueprintNotes is not "")
                {
                    <div class="flex justify-start">
                        <span data-cy="exercise-blueprint-notes" ><MultilineString Value="@blueprintNotes" /></span>
                    </div>
                }
                @if (previousNotes is not "")
                {
                    if(blueprintNotes is not ""){
                        <md-divider></md-divider>
                    }
                    <div class="flex justify-start">
                        <span data-cy="exercise-previous-notes" >Last time: <MultilineString Value="@previousNotes" /></span>
                    </div>
                }
                @if (thisNotes is not "")
                {
                    if(previousNotes is not "" || blueprintNotes is not ""){
                        <md-divider></md-divider>
                    }
                    <div class="flex justify-start">
                        <span data-cy="exercise-notes" ><MultilineString Value="@thisNotes" /></span>
                    </div>
                }

            </div>
        </Card>
    }
</div>

<Dialog @ref="notesDialog">
    <span slot="headline">Session Notes for @(RecordedExercise.Blueprint.Name)</span>
    <div slot="content" class="flex flex-col">
        <TextField label="Notes" TextFieldType="TextFieldType.Outlined" Value="@EditorNotes" OnChange="HandleNotesChange" type="textarea"/>
    </div>
    <div slot="actions" data-cy="notes-dialog-actions">
        <AppButton Type="AppButtonType.Text" OnClick="@(() => notesDialog?.Close())">Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="HandleNotesSave">Save</AppButton>
    </div>
</Dialog>

<Dialog @ref="previousDialog">
    <span slot="headline">Previous Sessions for @(RecordedExercise.Blueprint.Name)</span>
    <div slot="content" class="flex flex-col">
        <PreviousExerciseViewer PreviousRecordedExercises="@PreviousRecordedExercises" />
    </div>
    <div slot="actions" data-cy="previous-dialog-actions">
        <AppButton Type="AppButtonType.Text" OnClick="@(() => previousDialog?.Close())">Close</AppButton>
    </div>
</Dialog>

@code {
    private string moreButtonId = "a" + Guid.NewGuid();

    private Menu? _menu;
    private Dialog? notesDialog;
    private Dialog? previousDialog;

    private string EditorNotes { get; set; } = "";

    [EditorRequired] [Parameter] public RecordedExercise RecordedExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public ImmutableListValue<DatedRecordedExercise> PreviousRecordedExercises { get; set; } = null!;

    [EditorRequired] [Parameter] public bool ToStartNext { get; set; }

    [EditorRequired] [Parameter] public Action<int> CycleRepCountForSet { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int> ShowAdditionalActionsForSet { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<int, decimal> UpdateWeightForSet { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<decimal> UpdateWeightForExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action<string?> UpdateNotesForExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action OnEditExercise { get; set; } = null!;

    [EditorRequired] [Parameter] public Action ToggleExercisePerSetWeight { get; set; } = null!;

    [EditorRequired] [Parameter] public Action OnRemoveExercise { get; set; } = null!;

    [Parameter] public bool IsReadonly { get; set; } = false;

    [EditorRequired] [Parameter] public bool ShowPreviousButton { get; set; }

    private void HandleNotesChange(string value)
    {
        EditorNotes = value;
    }

    private void HandleNotesSave()
    {
        UpdateNotesForExercise(EditorNotes == "" ? null : EditorNotes);
        notesDialog?.Close();
    }

    private void OnOpenNotesButtonClick()
    {
        EditorNotes = RecordedExercise.Notes ?? "";
        notesDialog?.Open();
    }

    private void ShowPrevious()
    {
        previousDialog?.Open();
    }
}
