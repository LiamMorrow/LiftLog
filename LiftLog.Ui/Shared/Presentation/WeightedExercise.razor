@using LiftLog.Ui.Util
@{
    var (displayedExercise, repToStartNext, notesToShow) = (_holdingPrevious, PreviousRecordedExercises?.FirstOrDefault()?.RecordedExercise) switch
    {
        (true, null) => (RecordedExercise, -1, null),
        (true, var previous) => (previous, -1, previous.Notes),
        (false, _) => (RecordedExercise, RecordedExercise.PotentialSets.IndexOf(x => x.Set is null), null)
    };
}
<SplitCardControl>
    <MainContent>
        <div class="flex flex-col gap-4">
            <div class="flex justify-between gap-2">
                <span class="text-xl">@RecordedExercise.Blueprint.Name</span>
                <div class="flex gap-2">
                    <WeightDisplay
                        Weight="displayedExercise.Weight"
                        Increment="displayedExercise.Blueprint.WeightIncreaseOnSuccess"
                            UpdateWeight="w => {if (w is not null) UpdateWeightForExercise(w.Value);}"/>
                    <IconButton data-cy="exercise-notes-btn" Icon="notes" OnClick="OnOpenNotesButtonClick" Type="IconButtonType.Outlined"/>
                </div>
            </div>
            <div class="flex flex-wrap justify-center gap-2">
                @foreach (var (set, i) in displayedExercise.PotentialSets.IndexedTuples())
                {
                    <PotentialSetCounter
                        @key=i
                        Set="set"
                        ShowWeight=displayedExercise.PerSetWeight
                        MaxReps="displayedExercise.Blueprint.RepsPerSet"
                        WeightIncrement="displayedExercise.Blueprint.WeightIncreaseOnSuccess"
                        CycleRepCount=@(() => CycleRepCountForSet(i))
                        ClearRepCount=@(() => ClearRepCountForSet(i))
                        UpdateWeight=@((weight)=>UpdateWeightForSet(i, weight))
                        ToStartNext=@(ToStartNext && repToStartNext == i) />
                }
            </div>
            @if(notesToShow is not null)
            {
                <span data-cy="exercise-notes">@notesToShow</span>
            }
            @if(_holdingPrevious && PreviousRecordedExercises?.Any() == true)
            {
                <StatGraphCardContent Statistics=GetStatistics() RenderDelay=TimeSpan.Zero ShowTitle=false ></StatGraphCardContent>
            }
        </div>
    </MainContent>
    <SideContent>
        <IconButton Type="IconButtonType.FilledTonal" OnClick="()=>{_menu?.Open();}" Icon="more_horiz" />
        <Menu @ref="_menu">
            <MenuItem Label="Edit" Icon="edit" OnClick="OnEditExercise" />
            <MenuItem Label="Remove" Icon="delete" OnClick="OnRemoveExercise" />
        </Menu>
        <IconButton data-cy="per-rep-weight-btn" Type=IconButtonType.FilledTonal Icon=weight OnClick="ToggleExercisePerSetWeight"></IconButton>
        @if(PreviousRecordedExercises?.Any() == true)
        {
            <IconButton data-cy="prev-exercise-btn" Type="IconButtonType.FilledTonal" Icon="history" OnStartHold="()=> _holdingPrevious=true" OnEndHold="()=>_holdingPrevious = false" />
        }
    </SideContent>
</SplitCardControl>

<Dialog @ref=notesDialog>
    <span slot="headline">@(RecordedExercise.Blueprint.Name) Notes</span>
    <div slot="content">
        <TextField label="Notes" TextFieldType="TextFieldType.Outline" Value=@EditorNotes OnChange="HandleNotesChange"  type="textarea"  />
    </div>
    <div slot="actions" data-cy="notes-dialog-actions">
        <AppButton Type="AppButtonType.Text" OnClick=@(()=>notesDialog?.Close())>Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick=HandleNotesSave>Save</AppButton>
    </div>
</Dialog>
@code {
  private bool _holdingPrevious = false;
  private Menu? _menu;
  private Dialog? notesDialog;

  private string EditorNotes {get;set;} = "";

  [EditorRequired]
  [Parameter]
  public RecordedExercise RecordedExercise { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public ImmutableListValue<DatedRecordedExercise> PreviousRecordedExercises { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public bool ToStartNext { get; set; }

  [EditorRequired]
  [Parameter]
  public Action<int> CycleRepCountForSet { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action<int> ClearRepCountForSet { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action<int, decimal> UpdateWeightForSet { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action<decimal> UpdateWeightForExercise { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action<string?> UpdateNotesForExercise { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action OnEditExercise { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action ToggleExercisePerSetWeight { get; set; } = null!;

  [EditorRequired]
  [Parameter]
  public Action OnRemoveExercise { get; set; } = null!;

  private void HandleNotesChange(string value)
  {
    EditorNotes = value;
  }

  private void HandleNotesSave()
  {
    UpdateNotesForExercise(EditorNotes == "" ? null : EditorNotes);
    notesDialog?.Close();
  }

  private void OnOpenNotesButtonClick()
  {
      EditorNotes = RecordedExercise.Notes ?? "";
      notesDialog?.Open();
  }

  private StatisticOverTime GetStatistics(){
        return new StatisticOverTime(
            RecordedExercise.Blueprint.Name,
            PreviousRecordedExercises
                .Select(x => new TimeTrackedStatistic(x.DateTime ,x.RecordedExercise.Weight))
                .ToImmutableList()
            );
  }
}
