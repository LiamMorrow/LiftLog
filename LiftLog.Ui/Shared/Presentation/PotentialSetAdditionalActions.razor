<div class="flex flex-wrap gap-2 justify-center mb-2 mx-4">
    @GetRepButton(@<span>-</span>, null, "bg-secondary-container text-on-secondary-container")
    @for(int i = 0; i < MaxReps + 1; i++)
    {
        var reps = i;
        @GetRepButton(@<span class="font-bold">@reps</span>,reps, "bg-primary-container text-on-primary-container");
    }
</div>
<div class="flex flex-grow gap-2 justify-center">

    @for(int i = MaxReps+1; i < MaxReps + 4; i++)
    {
        var reps = i;
        @GetRepButton(@<span class="font-bold">@reps</span>, reps, "bg-secondary-container text-on-secondary-container");
    }
</div>

@code {

    [EditorRequired] [Parameter] public PotentialSet Set { get; set; } = null!;

    [EditorRequired] [Parameter] public int MaxReps { get; set; }

    [EditorRequired] [Parameter] public EventCallback<int?> OnSelectRepCount { get; set; }

    [EditorRequired] [Parameter] public EventCallback OnDeleteSet { get; set; }

    private int? lastPointerDownReps = int.MinValue;


    private RenderFragment GetRepButton(RenderFragment childContent, int? reps, string color)
    {
        void OnPointerDown(PointerEventArgs e)
        {
            lastPointerDownReps = reps;
        }
        // On iOS the click event is triggered when the user lifts their finger after the dialog is opened
        // This is a workaround to prevent the click event from being triggered until the user has actually tapped the button
        async Task OnClick()
        {
            if (lastPointerDownReps != reps)
            {
                return;
            }
            lastPointerDownReps = int.MinValue;
            await OnSelectRepCount.InvokeAsync(reps);
        }
        return @<div class="flex flex-col items-center relative">
            <button
                @key="reps ?? int.MaxValue"
                @onclick="OnClick"
                @onpointerdown="OnPointerDown"
                class="
                    repcount
                    flex-shrink-0
                    w-14
                    h-14
                    rounded-xl
                    relative
                    text-center
                    text-xl
                    flex
                    justify-center
                    align-middle
                    items-center
                    select-none
                    @color">
                <md-ripple style="--md-ripple-pressed-color: var(--md-sys-color-on-primary-container)"></md-ripple>
                @childContent
            </button>
        </div>;
    }
}
