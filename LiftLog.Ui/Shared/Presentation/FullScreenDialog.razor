
@implements IDisposable
@inject InsetsManager InsetsManager
@inject IJSRuntime Js
@if(opened)
{
    @* Put the dialog into a section in the main layout so that the scrim covers parent elements on ios *@
    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="FullscreenDialog">
        <div @ref=dialog class="@Animation text-on-surface fullscreen-dialog fixed top-0 bottom-0 left-0 right-0 bg-surface z-30 grid grid-cols-1 h-full grid-rows-[min-content_1fr_min-content]" data-open="@opened" data-closing="@closing" @onclose=Close>
            <div class="@topNavColorClass  transition-colors flex flex-col">
                <div style="height: @(InsetsManager.SystemSafeInsetTop)"></div>
                <div class="flex justify-start text-2xl items-center gap-2 p-4">
                    <IconButton Type="IconButtonType.Standard" Icon="close" OnClick="Close"/>
                    <span class="mr-auto">@Title</span>
                    @if(Action != null)
                    {
                        <AppButton data-cy="dialog-action" Type="AppButtonType.Text" OnClick="()=>{OnAction.InvokeAsync();Close();}">@Action</AppButton>
                    }
                </div>
            </div>
            <div @ref="_contentElementRef" class="px-2 py-2 overflow-y-auto" @onscroll="OnContentScroll" style="-webkit-overflow-scrolling: touch;">
                @ChildContent
                <div style="height: @(InsetsManager.SystemSafeInsetBottom)" class="w-full"></div>
            </div>
        </div>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
}
@code
{

    private bool opened = false;
    private bool closing = false;
    private ElementReference dialog;
    private string topNavColorClass = "bg-surface";
    private ElementReference _contentElementRef;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter][EditorRequired] public string Title { get; set; } = null!;

    [Parameter][EditorRequired] public string? Action { get; set; }

    [Parameter] public EventCallback OnAction { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        InsetsManager.InsetsChanged += OnSafeAreaInsetsChanged;
    }

    public void Dispose()
    {
        InsetsManager.InsetsChanged -= OnSafeAreaInsetsChanged;
    }

    private async void OnSafeAreaInsetsChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Open()
    {
        opened = true;
        StateHasChanged();
    }

    public void Close()
    {
        InvokeAsync(async ()=>{
            closing = true;
            StateHasChanged();
            await Task.Delay(200);
            opened = false;
            StateHasChanged();
            closing = false;
        });
    }

    private string Animation => closing ? "animate-fade-zoom-out" : "animate-fade-zoom-in";

    private async void OnContentScroll()
    {
        var scrollTop = await Js.InvokeAsync<double>("AppUtils.getScrollTop", _contentElementRef);
        var previousTopNavColorClass = topNavColorClass;
        topNavColorClass = scrollTop switch
        {
            // make it coloured after scrolling past 2px
            (<= 2) => "bg-surface",
            _ => "bg-surface-container"
        };
        if (previousTopNavColorClass != topNavColorClass)
        {
            await InvokeAsync(async () =>
            {
                StateHasChanged();
                await Task.Yield();
            });
        }
    }
}
