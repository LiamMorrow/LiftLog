@inject IJSRuntime JSRuntime

<md-list-item @ref="_listItem" @attributes="AdditionalAttributes" type="button" class="text-start @(AdditionalAttributes?.GetValueOrDefault("class")) @FocusClass" multi-line-supporting-text @onclick="OnClick">
    <span slot="headline" >@ProgramBlueprint.Name</span>
    <span slot="supporting-text">@SupportingText</span>

    <div slot="end" class="flex items-center">
        @RenderActiveBadge()
        <IconButton id="@_iconButtonId" Type="IconButtonType.Standard" Icon="more_horiz" OnClick=@(() => _menu?.Open())></IconButton>
        <Menu anchor="@_iconButtonId" @ref="_menu">
            <MenuItem Icon="delete" disabled="@IsActive" Label="@UiStrings.Remove" OnClick="() => OnRemove.InvokeAsync()"/>
            <MenuItem Icon="content_copy" Label="@UiStrings.Duplicate" OnClick="() => OnDuplicate.InvokeAsync()"/>
            <MenuItem Icon="share" Label="@UiStrings.Share" OnClick="() => OnShare.InvokeAsync()"/>
        </Menu>
    </div>
</md-list-item>


@code {
    private string _iconButtonId ="a"+Guid.NewGuid();

    private Menu? _menu;

    private ElementReference _listItem;

    [Parameter] [EditorRequired] public ProgramBlueprint ProgramBlueprint { get; set; } = null!;

    [Parameter] [EditorRequired] public EventCallback OnClick { get; set; }

    [Parameter] [EditorRequired] public bool BuiltIn { get; set; }

    [Parameter] [EditorRequired] public bool IsActive { get; set; }

    [Parameter] [EditorRequired] public bool IsFocused { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public EventCallback OnUse { get; set; }

    [Parameter] public EventCallback OnRemove { get; set; }

    [Parameter] public EventCallback OnDuplicate { get; set; }

    [Parameter] public EventCallback OnShare { get; set; }

    private string SupportingText => UiStrings.EditedOn(ProgramBlueprint.LastEdited.ToShortDateString());

    private string FocusClass => IsFocused ? "bg-secondary-container text-on-secondary-container " : "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && IsFocused)
        {
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("AppUtils.scrollIntoViewById", _iconButtonId);
        }
    }

    private RenderFragment? RenderActiveBadge()
    {
        if (IsActive)
        {
            return @<div class="flex flex-col justify-center"><span class="rounded-full relative bg-secondary-container text-on-secondary-container px-3 py-2 text-md" @onclick:stopPropagation="true" @onclick:preventDefault="true" >@UiStrings.Active<md-ripple></md-ripple></span></div>;
        }

        return @<AppButton data-cy="use-plan-btn" Type="AppButtonType.Text" OnClick="()=>OnUse.InvokeAsync()">@UiStrings.UseWorkout</AppButton>;
    }

}
