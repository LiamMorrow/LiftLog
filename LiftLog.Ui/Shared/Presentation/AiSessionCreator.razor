<LabelledForm>
    <LabelledFormRow Label="@UiStrings.WhatAreYouWorkingOut" Icon="physical_therapy">
        <ChipContainer>
            @RenderFilterChip(@UiStrings.Arms)
            @RenderFilterChip(@UiStrings.Chest)
            @RenderFilterChip(@UiStrings.BackMuscle)
            @RenderFilterChip(@UiStrings.Legs)
            @RenderFilterChip(@UiStrings.Triceps)
            @RenderFilterChip(@UiStrings.Biceps)
            @RenderFilterChip(@UiStrings.Quads)
            @RenderFilterChip(@UiStrings.Hamstrings)
            @RenderFilterChip(@UiStrings.Calves)
        </ChipContainer>
    </LabelledFormRow>
    <LabelledFormRow Label="" Icon="bar_chart">
        <Slider Min="0" Max="100" Value="Value.Volume" ValueChanged="i => OnChange.InvokeAsync(Value with { Volume = i })"
                Label="@VolumeLabel">
        </Slider>
    </LabelledFormRow>

    <AdditionalInfoInput Value="@Value.AdditionalInfo" OnUpdateAdditionalInfo="info => OnChange.InvokeAsync(Value with { AdditionalInfo = info })"/>
</LabelledForm>
@code {

    [EditorRequired] [Parameter] public EventCallback<AiSessionCreatorModel> OnChange { get; set; }

    [EditorRequired] [Parameter] public AiSessionCreatorModel Value { get; set; } = null!;

    private string VolumeLabel
        => Value.Volume switch
        {
            <= 30 => UiStrings.VolumeLight,
            <= 60 => UiStrings.VolumeMedium,
            _ => UiStrings.VolumeHeavy,
        };


    private void HandleSelectedChanged(string label, bool currentlySelected)
    {
        OnChange.InvokeAsync(Value with
        {
            AreasToWorkout = currentlySelected switch
            {
                true => Value.AreasToWorkout.Add(label),
                false => Value.AreasToWorkout.Remove(label)
            }
        });
    }

    private RenderFragment RenderFilterChip(string label)
    {
        return @<FilterChip OnSelectedChange="@((selected) => HandleSelectedChanged(label, selected))" Label="@label" Selected="@(Value.AreasToWorkout.Contains(label))"/>;
    }

}
