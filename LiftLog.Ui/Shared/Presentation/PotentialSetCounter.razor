@inject IJSRuntime JSRuntime

<div class="flex flex-col items-center relative">

    @* The box shadow is shown when the rep ISN'T completed.  The background colour is also animated to ensure that it remains visible in both transition directions *@
    <button
        @ref="_button"

        class="
            repcount
            flex-shrink-0
            w-14
            h-14
            @RepCountRounding
            relative
            text-center
            text-xl
            flex
            justify-center
            align-middle
            transition-[box-shadow,_border-radius,background-color]
            duration-150
            items-center
            @ColorClass
            @RepCountToStartClass"
        @onpointerdown="OnPointerDown"
        @onpointerleave="OnPointerLeave"
        @onpointerup="OnPointerUp"
        style="box-shadow: inset 0 0 0 @BoxShadowFill var(--md-sys-color-secondary-container);">
        <md-ripple style="--md-ripple-pressed-color: var(--md-sys-color-on-primary-container)" ></md-ripple>
        <span class="font-bold">@(RepCountValue?.ToString() ?? "-")</span><span class="inline text-sm align-text-top">/@MaxReps</span>
    </button>
    <md-focus-ring @ref="_focusRing" visible=@ToStartNext style="--md-focus-ring-shape: 0.75rem"></md-focus-ring>
        <button
            @onclick=HandleWeightClick
            data-cy="set-weight-button"
            class="
            relative
            rounded-b-xl
            transition-[height,padding,width]
            @scale
            overflow-hidden
            text-xs
            flex
            border-t
            justify-center
            border-outline
            bg-surface-container-high
            text-on-surface-variant"
        >
            <md-ripple></md-ripple>
            <WeightFormat Weight=Set.Weight SuffixClass=""/>
        </button>
</div>

<WeightDialog
    @ref="dialog"
    Weight="Set.Weight"
    Label="Set Weight"
    UpdateWeight="d=>UpdateWeight(d!.Value)"
    Increment="WeightIncrement"
    AllowNull="false"
/>
@code
{
    private WeightDialog? dialog;
    [Parameter]
    [EditorRequired]
    public PotentialSet Set { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public bool ShowWeight { get; set; }

    [Parameter]
    [EditorRequired]
    public Action<decimal> UpdateWeight { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public decimal WeightIncrement { get; set; }

    [EditorRequired]
    [Parameter]
    public int MaxReps { get; set; }

    [EditorRequired]
    [Parameter]
    public Action CycleRepCount { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public Action ClearRepCount { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public bool ToStartNext { get; set; }

    private int? RepCountValue => Set.Set?.RepsCompleted;

    private string RepCountRounding => ShowWeight ? "rounded-t-xl" : "rounded-xl";

    private DateTime? _lastPointerDownTime;
    private DateTime? _clearRepCountTime;
    private ElementReference _focusRing;
    private ElementReference _button;

    private string scale => ShowWeight ? "p-2 h-8 w-14" : "h-0 w-0 p-0";

    private string BoxShadowFill => RepCountValue is not null  ? "0" : "2rem";

// Realistically the bg should not be seen when there is a rep count, but there are mild artifacts when keeping it as bg-primary
    private string ColorClass =>  RepCountValue is not null ? "text-on-primary bg-primary" : "text-on-secondary-container bg-secondary-container";

    private string? RepCountToStartClass => ToStartNext ? "" : null;


    private void OnPointerDown(PointerEventArgs args){
        _lastPointerDownTime = DateTime.Now;
        Task.Delay(500).ContinueWith(_ => {
            if (_lastPointerDownTime is null || _lastPointerDownTime.Value.AddMilliseconds(500) > DateTime.Now) return;
            _clearRepCountTime = DateTime.Now;
            ClearRepCount();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await JSRuntime.InvokeVoidAsync("AppUtils.callOn", _focusRing, "detach");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnPointerLeave(PointerEventArgs args){
        _lastPointerDownTime = null;
    }

    private void OnPointerUp(PointerEventArgs args){
        // On desktop holding down opens a right click menu - so this does not fire
        // This results in needing to click the repcount twice after cycling.  Not an issue on mobile
        if(_clearRepCountTime is null)
        {
            CycleRepCount();
        }
        _clearRepCountTime = null;
        _lastPointerDownTime = null;
    }

    private void HandleWeightClick()
    {
        dialog?.Open();
    }

}
