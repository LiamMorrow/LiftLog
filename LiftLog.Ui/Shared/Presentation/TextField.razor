@inject IJSRuntime JSRuntime

@switch (TextFieldType)
{
    case TextFieldType.Outlined:
        <md-outlined-text-field @ref="_textField"
            @attributes="AdditionalAttributes"
            value=@Value
            @oninput=@((e) => OnChange?.Invoke((string?)e.Value!))
            @onfocusin=SelectOnFocus
            @onclick=OnClick
            @onfocusout=@(async _=>{await SetValueOnElement(); await OnBlur.InvokeAsync();})
            @onpaste=OnPaste
            @onkeypress="@(async (e) => {if(e.Key == "Enter"){await SetValueOnElement(); await OnBlur.InvokeAsync();}})"
            @onpaste:preventDefault=PastePreventDefault
        >
            @ChildContent
        </md-outlined-text-field>
        break;
    case TextFieldType.Filled:
        <md-filled-text-field @ref="_textField"
            @attributes="AdditionalAttributes"
            value=@Value
            @oninput=@((e) => OnChange?.Invoke((string?)e.Value!))
            @onfocusin=SelectOnFocus
            @onclick=OnClick
            @onfocusout=@(async _=>{await SetValueOnElement(); await OnBlur.InvokeAsync();})
            @onpaste=OnPaste
            @onkeypress="@(async (e) => {if(e.Key == "Enter"){await SetValueOnElement(); await OnBlur.InvokeAsync();}})"
            @onpaste:preventDefault=PastePreventDefault
        >
            @ChildContent
        </md-filled-text-field>
        break;
}

@code {

    private ElementReference _textField;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] [EditorRequired] public string Value { get; set; } = "";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public Action<string?>? OnChange { get; set; } = null!;

    [Parameter] public EventCallback OnClick { get; set; }

    [Parameter] public EventCallback OnFocus { get; set; }

    [Parameter] public EventCallback OnBlur { get; set; }

    [Parameter] public TextFieldType TextFieldType { get; set; } = TextFieldType.Outlined;

    [Parameter] public bool SelectAllOnFocus { get; set; } = true;

    [Parameter] public EventCallback<ClipboardEventArgs> OnPaste { get; set; }

    [Parameter] public bool PastePreventDefault { get; set; } = false;

    public async Task UpdateValueEvenIfFocused()
    {
        await SetValueOnElement();
    }

    protected override async Task OnParametersSetAsync()
    {
        await JSRuntime.InvokeVoidAsync("AppUtils.setValueIfNotFocused", _textField, Value);
        await base.OnParametersSetAsync();
    }

    private async Task SelectOnFocus(FocusEventArgs args)
    {
        if (SelectAllOnFocus)
            await JSRuntime.InvokeVoidAsync("AppUtils.selectAllText", _textField);
        await OnFocus.InvokeAsync();
    }

    private async Task SetValueOnElement()
    {
        await JSRuntime.InvokeVoidAsync("AppUtils.setValue", _textField, Value);
    }

}
