@implements IDisposable
@using LiftLog.Ui.Services
@using MaterialColorUtilities.Utils
@using MaterialColorUtilities.Schemes

@inject IThemeProvider ThemeProvider
<LiftLog.Ui.WebApplication/>

@if(_scheme is not null)
{
    <style>
        :root{
            --color-primary: @GetColorStr(_scheme.Primary);
            --color-on-primary: @GetColorStr(_scheme.OnPrimary);
            --color-secondary: @GetColorStr(_scheme.Secondary);
            --color-on-secondary: @GetColorStr(_scheme.OnSecondary);
            --color-secondary-container: @GetColorStr(_scheme.SecondaryContainer);
            --color-on-secondary-container: @GetColorStr(_scheme.OnSecondaryContainer);
            --color-tertiary: @GetColorStr(_scheme.Tertiary);
            --color-on-tertiary: @GetColorStr(_scheme.OnTertiary);
            --color-tertiary-container: @GetColorStr(_scheme.TertiaryContainer);
            --color-on-tertiary-container: @GetColorStr(_scheme.OnTertiaryContainer);
            --color-background: @GetColorStr(_scheme.Background);
            --color-on-background: @GetColorStr(_scheme.OnBackground);
            --color-surface: @GetColorStr(_scheme.Surface);
            --color-surface-container-highest: @GetColorStr(_scheme.SurfaceContainerHighest);
            --color-on-surface: @GetColorStr(_scheme.OnSurface);
            --color-on-surface-variant: @GetColorStr(_scheme.OnSurfaceVariant);
            --color-inverse-surface: @GetColorStr(_scheme.InverseSurface);
            --color-inverse-on-surface: @GetColorStr(_scheme.InverseOnSurface);
            --color-surface-container: @GetColorStr(_scheme.SurfaceContainer);
            --color-surface-container-high: @GetColorStr(_scheme.SurfaceContainerHigh);
            --color-surface-container-low: @GetColorStr(_scheme.SurfaceContainerLow);
            --color-outline: @GetColorStr(_scheme.Outline);
            --color-outline-variant: @GetColorStr(_scheme.OutlineVariant);
    ;
            --md-sys-color-primary: rgb(@GetColorStr(_scheme.Primary));
            --md-sys-color-on-primary: rgb(@GetColorStr(_scheme.OnPrimary));
            --md-sys-color-primary-container: rgb(@GetColorStr(_scheme.PrimaryContainer));
            --md-sys-color-on-primary-container: rgb(@GetColorStr(_scheme.OnPrimaryContainer));
            --md-sys-color-secondary: rgb(@GetColorStr(_scheme.Secondary));
            --md-sys-color-on-secondary: rgb(@GetColorStr(_scheme.OnSecondary));
            --md-sys-color-secondary-container: rgb(@GetColorStr(_scheme.SecondaryContainer));
            --md-sys-color-on-secondary-container: rgb(@GetColorStr(_scheme.OnSecondaryContainer));
            --md-sys-color-tertiary: rgb(@GetColorStr(_scheme.Tertiary));
            --md-sys-color-on-tertiary: rgb(@GetColorStr(_scheme.OnTertiary));
            --md-sys-color-tertiary-container: rgb(@GetColorStr(_scheme.TertiaryContainer));
            --md-sys-color-on-tertiary-container: rgb(@GetColorStr(_scheme.OnTertiaryContainer));
            --md-sys-color-error: rgb(@GetColorStr(_scheme.Error));
            --md-sys-color-on-error: rgb(@GetColorStr(_scheme.OnError));
            --md-sys-color-error-container: rgb(@GetColorStr(_scheme.ErrorContainer));
            --md-sys-color-on-error-container: rgb(@GetColorStr(_scheme.OnErrorContainer));
            --md-sys-color-background: rgb(@GetColorStr(_scheme.Background));
            --md-sys-color-on-background: rgb(@GetColorStr(_scheme.OnBackground));
            --md-sys-color-surface: rgb(@GetColorStr(_scheme.Surface));
            --md-sys-color-on-surface: rgb(@GetColorStr(_scheme.OnSurface));
            --md-sys-color-surface-variant: rgb(@GetColorStr(_scheme.SurfaceVariant));
            --md-sys-color-on-surface-variant: rgb(@GetColorStr(_scheme.OnSurfaceVariant));
            --md-sys-color-outline: rgb(@GetColorStr(_scheme.Outline));
            --md-sys-color-outline-variant: rgb(@GetColorStr(_scheme.OutlineVariant));
            --md-sys-color-inverse-surface: rgb(@GetColorStr(_scheme.InverseSurface));
            --md-sys-color-on-inverse-surface: rgb(@GetColorStr(_scheme.InverseOnSurface));
            --md-sys-color-inverse-primary: rgb(@GetColorStr(_scheme.InversePrimary));
            --md-sys-color-shadow: rgb(@GetColorStr(_scheme.Shadow));
            --md-sys-color-surface-tint: rgb(@GetColorStr(_scheme.SurfaceBright));
            --md-sys-color-surface-container-lowest: rgb(@GetColorStr(_scheme.SurfaceContainerLowest));
            --md-sys-color-surface-container-low: rgb(@GetColorStr(_scheme.SurfaceContainerLow));
            --md-sys-color-surface-container: rgb(@GetColorStr(_scheme.SurfaceContainer));
            --md-sys-color-surface-container-high: rgb(@GetColorStr(_scheme.SurfaceContainerHigh));
            --md-sys-color-surface-container-highest: rgb(@GetColorStr(_scheme.SurfaceContainerHighest));
            --md-sys-color-surface-dim: rgb(@GetColorStr(_scheme.SurfaceDim));
            --md-sys-color-shadow: rgb(@GetColorStr(_scheme.Shadow));
            --md-outlined-button-label-text-type: 'Roboto Flex';
        }
    </style>
}
@code {

    private Scheme<uint>? _scheme;

    string GetColorStr(uint color) => $"{ColorUtils.RedFromArgb(color)} {ColorUtils.GreenFromArgb(color)} {ColorUtils.BlueFromArgb(color)}";

    protected override async Task OnInitializedAsync()
    {
        _scheme = await ThemeProvider.GetColorSchemeAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ThemeProvider.SeedChanged += HandleThemeChange;
        }
        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        ThemeProvider.SeedChanged -= HandleThemeChange;
    }

    private async void HandleThemeChange(object? sender, object? args)
    {
        _scheme = await ThemeProvider.GetColorSchemeAsync();
        await InvokeAsync(StateHasChanged);
    }

}
