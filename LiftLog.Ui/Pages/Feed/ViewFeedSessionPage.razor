@using Fluxor;

@page "/feed/view-session/{EventId}"

@inject IState<FeedState> FeedState
@inject IState<ProgramState> ProgramState
@inject IState<CurrentSessionState> CurrentSessionState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (CurrentSessionState.Value.FeedSession is not null)
{
    <SessionComponent
        SessionTarget="SessionTarget.FeedSession"
        NavigateOnClose="/feed"
        PreviouslyCompleted=@(ImmutableDictionary<KeyedExerciseBlueprint, ImmutableListValue<DatedRecordedExercise>>.Empty)
        ShowRestTimer="false"
        ShowBodyweight="CurrentSessionState.Value.FeedSession.Bodyweight is not null"
        IsReadonly=true
        Username="@username"/>
}

@code
{
    [Parameter] public string EventId { get; set; } = "";

    string? username;

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Feed Session"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/feed"));

        var hasSession = false;

        if (Guid.TryParse(EventId, out var eventId))
        {
            var feedItem = FeedState
                .Value.Feed.OfType<SessionFeedItem>()
                .FirstOrDefault(x => x.EventId == eventId);
            if(feedItem is not null)
            {
                hasSession = true;
                Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.FeedSession, feedItem.Session));
                username = FeedState.Value.FollowedUsers.TryGetValue(feedItem.UserId, out var user) ? user.DisplayName : null;
            }
            if (CurrentSessionState.Value.FeedSession is not null)
                Dispatcher.Dispatch(new SetPageTitleAction(CurrentSessionState.Value.FeedSession.Blueprint.Name));
        }

        if (!hasSession)
        {
            NavigationManager.NavigateTo("/feed");
        }

        base.OnInitialized();
    }
}
