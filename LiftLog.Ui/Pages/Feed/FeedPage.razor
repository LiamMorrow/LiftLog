@using Fluxor;

@page "/feed"

@inject IJSRuntime JSRuntime
@inject IState<FeedState> FeedState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="sticky top-0 z-10 @TopNavColorClass transition-colors">
    <md-tabs @ref="tabs" @onchange="HandleTabChange">
        <md-primary-tab id="mainfeed-tab" active=@(GetTabActiveClass("mainfeed-panel")) aria-controls="mainfeed-panel">Feed</md-primary-tab>
        <md-primary-tab id="following-tab" active=@(GetTabActiveClass("following-panel")) aria-controls="following-panel">Following</md-primary-tab>
        <md-primary-tab id="followers-tab" active=@(GetTabActiveClass("followers-panel")) aria-controls="followers-panel">
            <span class="flex items-center gap-1">
                <span>Followers</span>
                @if (FeedState.Value.FollowRequests is { Count: > 0 })
                {
                    <div class="w-2 h-2 bg-error rounded-full"></div>
                }
            </span>
        </md-primary-tab>
    </md-tabs>
</div>

<div class="mt-2 flex-grow">
    <div id="mainfeed-panel" role="tabpanel" aria-labelledby="mainfeed-tab" class="@(GetTabClass("mainfeed-panel")) min-h-full" @onpull-to-refresh="OnPullToRefresh">

        @if(FeedState.Value.Identity?.PublishWorkouts is true)
        {
            <div class="mx-2 my-4 flex flex-col"><FeedShareUrl/></div>
        }else {
            <Card class="flex flex-col items-center justify-between m-2" Type=Card.CardType.Filled>
                <md-icon class="mb-4">error</md-icon>
                <span class="text-on-surface">You are not publishing your workouts</span>
                <AppButton Type=AppButtonType.Text OnClick="@(async ()=>{settingsDialog?.Open(); await Task.Delay(500); SetPublishWorkouts(true); })">Start publishing</AppButton>
            </Card>
        }

        @if (FeedState.Value.Feed is { Count: 0 })
        {
            <EmptyInfo class="mx-4 mt-10">
                <p>Nothing here yet!<br> Nobody you're following has published anything yet! Come back later.</p>
            </EmptyInfo>
        }
        <VirtualizedCardList Items="@(FeedState.Value.Feed.Select(x => (Item: x, User: FeedState.Value.FollowedUsers.GetValueOrDefault(x.UserId))).Where(x => x.User is not null).ToList())" OnClick="@(x => ViewFeedSession(x.Item))" CardClass="animate-fade-zoom-in">
            <FeedItemCardContent Item="context.Item" User="@(context.User)"/>
        </VirtualizedCardList>
    </div>

    <div id="following-panel" role="tabpanel" aria-labelledby="following-tab" class="@(GetTabClass("following-panel"))">
        @if (FeedState.Value.FollowedUsers is { Count: 0 })
        {
            <EmptyInfo class="mx-4 mt-10">
                <p>Start following someone!<br>You're not currently following anyone, ask a friend for their share link to start!</p>
            </EmptyInfo>
        }
        <VirtualizedCardList Items="@(FeedState.Value.FollowedUsers.Values.ToList())" CardClass="animate-fade-zoom-in">
            <FeedUserCardContent User="context" UpdateUser="UpdateUser" DeleteUser="() => BeginDeleteUser(context)" ViewUserPlan="() => ViewUserPlan(context)"/>
        </VirtualizedCardList>
    </div>


    <div id="followers-panel" role="tabpanel" aria-labelledby="followers-tab" class="@(GetTabClass("followers-panel"))">
        @if(FeedState.Value.Identity?.PublishWorkouts is true)
        {
            <div class="mx-2 my-4 flex flex-col"><FeedShareUrl/></div>
        }else {
            <Card class="flex flex-col items-center justify-between m-2" Type=Card.CardType.Filled>
                <md-icon class="mb-4">error</md-icon>
                <span class="text-on-surface">You are not publishing your workouts</span>
                <AppButton Type=AppButtonType.Text OnClick="@(async ()=>{settingsDialog?.Open(); await Task.Delay(500); SetPublishWorkouts(true); })">Start publishing</AppButton>
            </Card>
        }
        @if (FeedState.Value.Followers is { Count: 0 } && FeedState.Value.FollowRequests is { Count: 0 })
        {
            <EmptyInfo class="mx-4 mt-10">
                <p>Nobody is following you yet!<br>Share your link with friends to get followers</p>
            </EmptyInfo>
        }
        <VirtualizedCardList Items="@(FeedState.Value.FollowRequests.ToList())" CardClass="animate-fade-zoom-in">
            <FollowRequestCardContent FollowRequest="context" Accept="@(() => AcceptFollowRequest(context))" Deny="@(() => DenyFollowRequest(context))"/>
        </VirtualizedCardList>
        <VirtualizedCardList Items="@(FeedState.Value.Followers.Values.ToList())" CardClass="animate-fade-zoom-in">
            <FollowerCardContent User="context" RemoveFollower="@(() => StartRemoveFollower(context))" ShowFollowBack="@(!FeedState.Value.FollowedUsers.ContainsKey(context.Id))" OnFollowBack="@(() => RedirectToFollowUserUrl(context))"/>
        </VirtualizedCardList>
    </div>
</div>

<FullScreenDialog @ref=settingsDialog Title="Manage Feed" Action=@null >
    <FeedIdentityManager @ref=feedIdentityManager />
</FullScreenDialog>


@if(IsInActiveScreen)
{
    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="TrailingTitleButton">
        <IconButton Type=IconButtonType.Standard Icon="manage_accounts" OnClick="@(()=>settingsDialog?.Open())"/>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
}


<ConfirmationDialog @ref="deleteUserDialog" OkText="Unfollow" OnOk="DeleteUser">
    <Headline>Unfollow user</Headline>
    <TextContent>This will unfollow <span class="text-primary font-bold">@(userToDelete?.Nickname ?? userToDelete?.Name ?? "Anonymous User")</span> and remove all their content on your device.</TextContent>
</ConfirmationDialog>

<ConfirmationDialog @ref="removeFollowerDialog" OkText="Remove" OnOk="RemoveFollower">
    <Headline>Remove follower</Headline>
    <TextContent>This will stop <span class="text-primary font-bold">@(userToDelete?.Nickname ?? userToDelete?.Name ?? "Anonymous User")</span> from following you and remove all your content from their device.</TextContent>
</ConfirmationDialog>

@code
{

    [CascadingParameter(Name = "TopNavColorClass")]
    public string TopNavColorClass { get; set; } = null!;

    [CascadingParameter(Name = "IsInActiveScreen")]
    public bool IsInActiveScreen { get; set; }


    private ElementReference tabs;
    private ConfirmationDialog? deleteUserDialog;
    private ConfirmationDialog? removeFollowerDialog;
    private FeedUser? userToDelete;
    private FullScreenDialog? settingsDialog;
    private FeedIdentityManager? feedIdentityManager;

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Feed"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
        Dispatcher.Dispatch(new FetchSessionFeedItemsAction(FromUserAction: false));
        Dispatcher.Dispatch(new FetchInboxItemsAction(FromUserAction: false));
        Dispatcher.Dispatch(new SetReopenCurrentSessionAction(SessionTarget.FeedSession, false));
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.FeedSession, null));
        Dispatcher.Dispatch(new PublishUnpublishedSessionsAction());
        if (FeedState.Value.Identity is null)
        {
            Dispatcher.Dispatch(
                new CreateFeedIdentityAction(
                    Name: null,
                    ProfilePicture: null,
                    PublishBodyweight: false,
                    PublishPlan: false,
                    PublishWorkouts: false,
                    FromUserAction: false
                )
            );
        }
        base.OnInitialized();

        SubscribeToAction<FeedApiErrorAction>(OnFeedApiError);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("AppUtils.setupPullToRefresh", "#mainfeed-panel");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnPullToRefresh()
    {
        Dispatcher.Dispatch(new FetchSessionFeedItemsAction(FromUserAction: true));
        Dispatcher.Dispatch(new FetchInboxItemsAction(FromUserAction: false));
    }

    private void NavigateToCreateFeedIdentity()
    {
        NavigationManager.NavigateTo("/feed/create-identity");
    }

    private void AcceptFollowRequest(FollowRequest request)
    {
        Dispatcher.Dispatch(new AcceptFollowRequestAction(request));
    }

    private void DenyFollowRequest(FollowRequest request)
    {
        Dispatcher.Dispatch(new DenyFollowRequestAction(request));
    }

    private void UpdateUser(FeedUser user)
    {
        Dispatcher.Dispatch(new PutFollowedUsersAction(user));
    }

    private void StartRemoveFollower(FeedUser follower)
    {
        userToDelete = follower;
        removeFollowerDialog?.Open();
        StateHasChanged();
    }

    private void RemoveFollower()
    {
        removeFollowerDialog?.Close();
        if (userToDelete != null)
        {
            Dispatcher.Dispatch(new StartRemoveFollowerAction(userToDelete));
        }

        userToDelete = null;
    }

    private void BeginDeleteUser(FeedUser user)
    {
        userToDelete = user;
        deleteUserDialog?.Open();
        StateHasChanged();
    }

    private void DeleteUser()
    {
        deleteUserDialog?.Close();
        if (userToDelete is not null)
        {
            Dispatcher.Dispatch(new UnfollowFeedUserAction(userToDelete));
        }

        userToDelete = null;
    }

    private void ViewUserPlan(FeedUser user)
    {
        NavigationManager.NavigateTo($"/feed/user-plan/{user.Id}");
    }

    private async Task HandleTabChange()
    {
        var activeTab = await JSRuntime.InvokeAsync<string>("AppUtils.getActiveTabControls", tabs);
        Dispatcher.Dispatch(new SetActiveTabAction(activeTab));
    }

    private string GetTabClass(string tabId)
    {
        return FeedState.Value.ActiveTab == tabId ? "" : "hidden";
    }

    private bool GetTabActiveClass(string tabId)
    {
        return FeedState.Value.ActiveTab == tabId;
    }

    private void ViewFeedSession(FeedItem item)
    {
        if (item is SessionFeedItem sessionItem)
        {
            NavigationManager.NavigateTo($"/feed/view-session/{sessionItem.EventId}");
        }
    }

    private void RedirectToFollowUserUrl(FeedUser user)
    {
        NavigationManager.NavigateTo(FeedShareUrl.GetShareUrl(user.Id.ToString(), user.Name));
    }

    private void SetPublishWorkouts(bool value)
    {
        if (FeedState.Value.Identity is null)
            return;
        Dispatcher.Dispatch(
            new UpdateFeedIdentityAction(
                FeedState.Value.Identity.Name,
                FeedState.Value.Identity.ProfilePicture,
                FeedState.Value.Identity.PublishBodyweight,
                FeedState.Value.Identity.PublishPlan,
                value,
                FromUserAction: true));
    }

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        await JSRuntime.InvokeVoidAsync("AppUtils.destroyPullToRefresh");
        await base.DisposeAsyncCore(disposing);
    }

    private void OnFeedApiError(FeedApiErrorAction action)
    {
        if(!action.Action.FromUserAction)
            return;
        Dispatcher.Dispatch(new ToastAction(action.Message));
    }
}
