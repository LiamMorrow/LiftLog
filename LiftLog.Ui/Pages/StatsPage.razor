@page "/stats"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject SessionService SessionService;
@inject IState<SettingsState> SettingsState;
@inject IState<StatsState> StatsState;
@inject IDispatcher Dispatcher;

<div class="flex justify-between my-2">
    <Select T="string" Options="SessionSelectOptions" Value="StatsState.Value.OverallViewSessionName" ValueChanged="v => {  Dispatcher.Dispatch(new SetOverallViewSessionAction(v)); Dispatcher.Dispatch(new SetStatsIsDirtyAction(true)); Dispatcher.Dispatch(new FetchOverallStatsAction());}"></Select>
    <Select data-cy="stats-time-selector" T="TimeSpan" Options="SelectTimeOptions" Value="StatsState.Value.OverallViewTime" ValueChanged="v => { Dispatcher.Dispatch(new SetOverallViewTimeAction(v)); Dispatcher.Dispatch(new SetStatsIsDirtyAction(true)); Dispatcher.Dispatch(new FetchOverallStatsAction()); }"></Select>
</div>
<div class="flex flex-col justify-between m-2 mb-5">
    <SearchInput SearchTerm=@SearchTerm OnSearch="@((st)=>{SearchTerm = st; StateHasChanged();})" />
</div>
@if (StatsState.Value.IsLoading)
{
    <div class="flex flex-col justify-center h-full gap-4 text-on-surface">
        <div>
            <md-circular-progress aria-label="Session loading" indeterminate four-color></md-circular-progress>
        </div>
        <span>
            <p>Calculating...</p>
        </span>
    </div>
}
else if ((StatsState.Value.OverallView?.SessionStats.Count ?? 0) == 0)
{
    <EmptyInfo>
        <p>No data available.<br> Try changing your filters at the top.</p>
    </EmptyInfo>
}
else if (!StatsState.Value.IsLoading && StatsState.Value.OverallView is not null)
{
    var overallStats = StatsState.Value.OverallView;
    <div class="grid grid-rows-2 grid-cols-2 gap-2 mb-2 px-2 @HiddenOnSearch">
        <SingleValueStatisticsCard Class="scale-0 animate-zoom-in">
            <Title>Average time between sets</Title>
            <Body>
            <TimeSpanFormat TimeSpan="@overallStats.AverageTimeBetweenSets"/>
            </Body>
        </SingleValueStatisticsCard>
        <SingleValueStatisticsCard Class="scale-0 animate-zoom-in" Style="animation-delay: 50ms;">
            <Title>Average session length</Title>
            <Body>
            <TimeSpanFormat TimeSpan="@overallStats.AverageSessionLength" TruncateToMins="true"/>
            </Body>
        </SingleValueStatisticsCard>
        <SingleValueStatisticsCard Class="scale-0 animate-zoom-in" Style="animation-delay: 100ms;">
            <Title>Most time spent</Title>
            <Body>@overallStats.ExerciseMostTimeSpent?.ExerciseName</Body>
        </SingleValueStatisticsCard>
        <SingleValueStatisticsCard Class="scale-0 animate-zoom-in" Style="animation-delay: 150ms;">
            <Title>Heaviest lift</Title>
            <Body>
            <div class="flex flex-col justify-center items-center">
                <WeightFormat Weight="@overallStats.HeaviestLift?.Weight"/>
                <span>@overallStats.HeaviestLift?.Blueprint.Name</span>
            </div>
            </Body>
        </SingleValueStatisticsCard>
    </div>

    <div class="flex flex-col gap-2">
        @foreach(var pinnedStat in StatsState.Value.GetPinnedExercises().Where(SearchTermMatches).IndexedTuples())
        {
            <Card class="mx-2">
                <StatGraphCardContent Title="@pinnedStat.Item.ExerciseName" Statistics="[pinnedStat.Item.Statistics, pinnedStat.Item.OneRepMaxStatistics]" RenderDelay="TimeSpan.FromMilliseconds(200 + pinnedStat.Index * 200)"/>
            </Card>
        }
        @if (SettingsState.Value.ShowBodyweight && overallStats.BodyweightStats.Statistics.Any())
        {
            <Card class=@CardClass >
                <StatGraphCardContent Title="Bodyweight" Statistics="[overallStats.BodyweightStats]" RenderDelay="TimeSpan.FromMilliseconds(100)"/>
            </Card>
        }
        <Card class=@CardClass>
            <StatGraphCardContent Title="Sessions" Statistics="overallStats.SessionStats" RenderDelay="TimeSpan.FromMilliseconds(200)"/>
        </Card>
        <CardList KeySelector="context=>context.Item.ExerciseName" Items="@(UnpinnedExercisesToShow.IndexedTuples())" >
            <StatGraphCardContent Title="@context.Item.ExerciseName" Statistics="[context.Item.Statistics, context.Item.OneRepMaxStatistics]" RenderDelay="TimeSpan.FromMilliseconds(200 + context.Index * 200)"/>
        </CardList>
        @if(SearchTerm != "" && !UnpinnedExercisesToShow.Any())
        {
            <EmptyInfo>
                <p>No exercises found.<br> Try changing your filters at the top.</p>
            </EmptyInfo>
        }
    </div>
}

@code {

    private string SearchTerm = "";

    private IEnumerable<ExerciseStatistics> UnpinnedExercisesToShow => StatsState.Value.OverallView?.ExerciseStats.Where(x=>!StatsState.Value.IsExercisePinned(x)).Where(SearchTermMatches) ?? [];

    private List<Select<TimeSpan>.SelectOption> SelectTimeOptions =
    [
        new("7 days", TimeSpan.FromDays(7)),
        new("14 days", TimeSpan.FromDays(14)),
        new("30 days", TimeSpan.FromDays(30)),
        new("90 days", TimeSpan.FromDays(90)),
        new("180 days", TimeSpan.FromDays(180)),
        new("365 days", TimeSpan.FromDays(365)),
        new("All time", TimeSpan.FromDays(36500)),
    ];

    private List<Select<string>.SelectOption> SessionSelectOptions = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new FetchOverallStatsAction());
        Dispatcher.Dispatch(new SetPageTitleAction("Statistics"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
    }

    protected override async Task OnInitializedAsync()
    {
        SessionSelectOptions = await SessionService.GetLatestSessionsAsync()
            .Select(x => new Select<string>.SelectOption(x.Blueprint.Name, x.Blueprint.Name))
            .Distinct()
            .Prepend(new Select<string>.SelectOption("All sessions", null!))
            .Prepend(new Select<string>.SelectOption("Current sessions", "CURRENT_SESSIONS"))
            .ToListAsync();
        await base.OnInitializedAsync();
    }

    private string HiddenOnSearch => string.IsNullOrWhiteSpace(SearchTerm) ? "" : "hidden";

    private string CardClass => "mx-2 " + HiddenOnSearch;

    private bool SearchTermMatches(ExerciseStatistics statistics)
    {
        if(string.IsNullOrWhiteSpace(SearchTerm))
        {
            return true;
        }
        return statistics.ExerciseName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase);
    }
}
