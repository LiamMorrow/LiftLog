@page "/session"
@using LiftLog.Ui.Store.CurrentSession
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using Fluxor;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<CurrentSessionState> CurrentSessionState
@inject IState<ProgramState> ProgramState
@inject ProgressRepository ProgressRepository
@inject IState<SettingsState> SettingsState
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager
@inject ILogger<SessionPage> logger

@if (CurrentSessionState.Value.WorkoutSession is not null)
{
    <SessionComponent
        PreviouslyCompleted=@(previouslyCompleted)
        ShowBodyweight="SettingsState.Value.ShowBodyweight"
        SessionTarget=@SessionTarget.WorkoutSession
        NavigateOnClose="/"
    />
}


@code
{
    private ImmutableDictionary<KeyedExerciseBlueprint, ImmutableListValue<DatedRecordedExercise>> previouslyCompleted = ImmutableDictionary<KeyedExerciseBlueprint, ImmutableListValue<DatedRecordedExercise>>.Empty;

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Session"));
        Dispatcher.Dispatch(new SetReopenCurrentSessionAction(SessionTarget.WorkoutSession, true));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/"));
        if (CurrentSessionState.Value.WorkoutSession is null)
        {
            Dispatcher.Dispatch(new NavigateAction("/"));
        }
        else
        {
            var sw = System.Diagnostics.Stopwatch.StartNew();
            previouslyCompleted = await ProgressRepository.GetLatestOrderedRecordedExercisesAsync(maxRecordsPerExercise: 10);
            Dispatcher.Dispatch(new SetPageTitleAction(CurrentSessionState.Value.WorkoutSession.Blueprint.Name));
            sw.Stop();
            logger.LogInformation($"Session init initialized completed in {sw.ElapsedMilliseconds}ms");
        }

        await base.OnInitializedAsync();
    }
}
