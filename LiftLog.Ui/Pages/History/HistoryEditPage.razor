@page "/history/edit"
@using LiftLog.Ui.Store.CurrentSession
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using Fluxor;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<CurrentSessionState> CurrentSessionState
@inject IState<ProgramState> ProgramState
@inject ProgressRepository ProgressRepository
@inject IState<SettingsState> SettingsState
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager

@if (CurrentSessionState.Value.HistorySession is not null)
{
    <div class="flex w-full my-2 px-2">
        <TextField
            Label="Date"
            class="w-full"
            TextFieldType="TextFieldType.Filled"
            Value=@(CurrentSessionState.Value.HistorySession.Date.ToString("o"))
            OnChange=SetSessionDate
            type="date"/>
    </div>
    <SessionComponent
        ShowRestTimer=false
        PreviouslyCompleted=previouslyCompleted
        ShowBodyweight="SettingsState.Value.ShowBodyweight"
        SessionTarget=@SessionTarget.HistorySession
        NavigateOnClose="/history" />
}

@code
{
    private ImmutableDictionary<KeyedExerciseBlueprint, ImmutableListValue<DatedRecordedExercise>> previouslyCompleted = ImmutableDictionary<KeyedExerciseBlueprint, ImmutableListValue<DatedRecordedExercise>>.Empty;
    private void SetSessionDate(string dateString)
    {
        if (DateOnly.TryParse(dateString, out var date))
            Dispatcher.Dispatch(
                new SetActiveSessionDateAction(SessionTarget.HistorySession, DateOnly.Parse(dateString))
            );
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SetPageTitleAction("Session"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/history"));
        Dispatcher.Dispatch(new SetReopenCurrentSessionAction(SessionTarget.HistorySession, true));
        if (CurrentSessionState.Value.HistorySession is null)
        {
            NavigationManager.NavigateTo("/history");
        }
        else
        {
            Dispatcher.Dispatch(new SetPageTitleAction(CurrentSessionState.Value.HistorySession.Blueprint.Name));
        }
    }
}
