@page "/history/edit"
@using LiftLog.Ui.Store.CurrentSession
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Repository
@using Fluxor;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<CurrentSessionState> CurrentSessionState
@inject IState<ProgramState> ProgramState
@inject IProgressRepository ProgressRepository
@inject IDispatcher Dispatcher
@inject IState<AppState> AppState;
@inject NavigationManager NavigationManager

@{
    this.SubscribeToAction<RehydrateSessionAction>(state =>
        {
            if (CurrentSessionState.Value.HistorySession is null)
            {
                NavigationManager.NavigateTo("/history");
            }
        });
}
@if (CurrentSessionState.Value.HistorySession is not null)
{
    <div class="flex w-full my-2">
    <TextField
        Label="Date"
        class="w-full"
        TextFieldType="TextFieldType.Filled"
        Value=@(CurrentSessionState.Value.HistorySession.Date.ToString("o"))
        OnChange=SetSessionDate
        type="date" />
        </div>

    Init(CurrentSessionState.Value.HistorySession);
    <SessionComponent
        ShowRestTimer=false
        CycleRepcountForExercise=CycleRepcountForExercise
        ClearRepCountForExercise="ClearRepCountForExercise"
        UpdateWeightForExercise=UpdateWeightForExercise
        Session=@(CurrentSessionState.Value.HistorySession)
        SaveSession=SaveSession
        CloseSession=CloseSession
        PreviouslyCompleted=previouslyCompleted
        RemoveExercise=RemoveExercise
        EditExercise="EditExercise"
        AddExercise="AddExercise"
        UpdateNotesForExercise="UpdateNotesForExercise"
        ShowBodyweight="AppState.Value.ShowBodyweight"
        ToggleExercisePerSetWeight=ToggleExercisePerSetWeight
        UpdateWeightForSet=UpdateWeightForSet
        ExerciseNames="ProgramState.Value.ExerciseNames"
        SessionInPlan=@(ProgramState.Value.SessionBlueprints.Contains(CurrentSessionState.Value.HistorySession.Blueprint))
        SessionWithSameNameInPlan=@(ProgramState.Value.SessionBlueprints.Any(x=>x.Name == CurrentSessionState.Value.HistorySession.Blueprint.Name))
        AddSessionToPlan="AddSessionToPlan"
        UpdateSessionInPlan="UpdateSessionInPlan"
        UpdateBodyweight="UpdateBodyweight" />
}

@code
{
    private ImmutableDictionary<KeyedExerciseBlueprint, RecordedExercise> previouslyCompleted = ImmutableDictionary<KeyedExerciseBlueprint, RecordedExercise>.Empty;
    private bool initted = false;
    private void Init(Session session)
    {
        if(!initted)
        {
            initted = true;
            Dispatcher.Dispatch(new SetPageTitleAction(session.Blueprint.Name));
        }
    }

    private void SetSessionDate(string dateString)
    {
        if(DateOnly.TryParse(dateString, out var date))
            Dispatcher.Dispatch(
                new SetActiveSessionDateAction(SessionTarget.HistorySession, DateOnly.Parse(dateString))
            );
    }

    private void ClearRepCountForExercise(int exerciseIndex, int setIndex)
        => Dispatcher.Dispatch(new ClearExerciseRepsAction(SessionTarget.HistorySession, exerciseIndex, setIndex));

    private void CycleRepcountForExercise(int exerciseIndex, int setIndex)
        => Dispatcher.Dispatch(new CycleExerciseRepsAction(SessionTarget.HistorySession, exerciseIndex, setIndex));

    private void UpdateWeightForExercise(int exerciseIndex, decimal weight)
        => Dispatcher.Dispatch(new UpdateExerciseWeightAction(SessionTarget.HistorySession, exerciseIndex, weight));

    private void EditExercise(int exerciseIndex, SessionExerciseEditModel exercise)
        => Dispatcher.Dispatch(new EditExerciseInActiveSessionAction(SessionTarget.HistorySession, exerciseIndex, exercise));

    private void AddExercise(SessionExerciseEditModel exercise)
        => Dispatcher.Dispatch(new AddExerciseToActiveSessionAction(SessionTarget.HistorySession, exercise));

    private void RemoveExercise(int exerciseIndex)
        => Dispatcher.Dispatch(new RemoveExerciseFromActiveSessionAction(SessionTarget.HistorySession, exerciseIndex));

    private void UpdateNotesForExercise(int exerciseIndex, string? notes)
        => Dispatcher.Dispatch(new UpdateNotesForExerciseAction(SessionTarget.HistorySession, exerciseIndex, notes));

    private void ToggleExercisePerSetWeight(int exerciseIndex)
        => Dispatcher.Dispatch(new ToggleExercisePerSetWeightAction(SessionTarget.HistorySession, exerciseIndex));

    private void UpdateWeightForSet(int exerciseIndex, int setIndex, decimal weight)
        => Dispatcher.Dispatch(new UpdateWeightForSetAction(SessionTarget.HistorySession, exerciseIndex, setIndex, weight));

    private void UpdateBodyweight(decimal? bodyweight)
        => Dispatcher.Dispatch(new UpdateBodyweightAction(SessionTarget.HistorySession, bodyweight));

    private void AddSessionToPlan()
    {
        if(CurrentSessionState.Value.HistorySession?.Blueprint is SessionBlueprint blueprint)
        {
            var existingSessionWithSameName = ProgramState.Value.SessionBlueprints.Any(x=>x.Name ==blueprint.Name);
            if(existingSessionWithSameName){
                var blueprintNameWithoutNumber = System.Text.RegularExpressions.Regex.Replace(blueprint.Name, @" \(\d+\)$", "");
                var newName = blueprint.Name;
                var i = 1;
                while(ProgramState.Value.SessionBlueprints.Any(x=>x.Name == newName))
                {
                    newName = $"{blueprintNameWithoutNumber} ({i})";
                    i++;
                }
                blueprint = blueprint with { Name = newName };
            }
            Dispatcher.Dispatch(new AddProgramSessionAction(blueprint));
            Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.HistorySession, CurrentSessionState.Value.HistorySession with { Blueprint = blueprint }));
            Dispatcher.Dispatch(new SetPageTitleAction(blueprint.Name));
        }
    }

    private void UpdateSessionInPlan()
    {
        if(CurrentSessionState.Value.HistorySession?.Blueprint is SessionBlueprint blueprint)
        {
            var blueprintIndex = ProgramState.Value.SessionBlueprints.IndexedTuples().First(x=>x.Item.Name ==blueprint.Name).Index;
            Dispatcher.Dispatch(new SetProgramSessionAction(blueprintIndex, blueprint));
        }
    }

    private void SaveSession()
    {
        Dispatcher.Dispatch(new PersistCurrentSessionAction(SessionTarget.HistorySession));
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.HistorySession, null));

        NavigationManager.NavigateTo("/history");
    }

    private void CloseSession()
    {
        NavigationManager.NavigateTo("/history");
    }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Session"));
        Dispatcher.Dispatch(new FetchExerciseNamesAction());
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/history"));
        base.OnInitialized();
    }
}
