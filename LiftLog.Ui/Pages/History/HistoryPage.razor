@page "/history"
@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.CurrentSession
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject IState<CurrentSessionState> CurrentSessionState
@inject IDispatcher Dispatcher
@inject ILogger<HistoryPage> logger

@if(!_latestSessions.Any())
{
<div class="flex flex-col justify-center items-center h-full gap-4 text-on-surface">
    <md-icon>info</md-icon>
    <span>
        <p>Nothing recorded yet!<br> Complete a session and check again.</p>
    </span>
</div>
}
else{
<VirtualizedCardList Items="_latestSessions" OnClick="HandleSessionClick">
    <SplitCardControl>
        <MainContent>
            <SessionSummary IsFilled="true" Session="context"></SessionSummary>
        </MainContent>

        <SideContent>
            <IconButton Type="IconButtonType.FilledTonal" OnClick=@(() => {_selectedSession = context;
                _deleteDialog?.Open();}) Icon="delete" />
        </SideContent>
    </SplitCardControl>
</VirtualizedCardList>
}

<Dialog @ref="_deleteDialog">
    <span slot="headline">Delete Session?</span>
    <span slot="content" class="block text-left">Session will be deleted from history, this cannot be undone.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="()=>{_deleteDialog?.Close();}">Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="DeleteSession">Delete</AppButton>
    </div>
</Dialog>

@code
{

    private ICollection<Session> _latestSessions = new List<Session>();
    private Session? _selectedSession;
    private Dialog? _deleteDialog;

    private async void DeleteSession()
    {
        if (_selectedSession == null)
        {
            return;
        }
        Dispatcher.Dispatch(new DeleteSessionAction(_selectedSession));
        Dispatcher.Dispatch(new SetStatsIsDirtyAction(true));
        _selectedSession = null;
        _deleteDialog?.Close();
        this._latestSessions = await SessionService
            .GetLatestSessionsAsync()
            .ToListAsync();
    }

    private void HandleSessionClick(Session session)
    {
        Dispatcher.Dispatch(new SetCurrentSessionAction(SessionTarget.HistorySession, session));
        NavigationManager.NavigateTo("/history/edit");
    }

    protected override async Task OnInitializedAsync()
    {
        var sw = System.Diagnostics.Stopwatch.StartNew();
        Dispatcher.Dispatch(new SetPageTitleAction("History"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
        this._latestSessions = await SessionService
        .GetLatestSessionsAsync()
        .ToListAsync();
        await base.OnInitializedAsync();
        sw.Stop();
        logger.LogInformation($"History page initialized in {sw.ElapsedMilliseconds} ms");
    }
}
