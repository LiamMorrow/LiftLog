@page "/settings"
@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Settings

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
@inject IAppPurchaseService AppPurchaseService
@inject IThemeProvider ThemeProvider
@inject IState<SettingsState> SettingsState
@inject NavigationManager NavigationManager

<div class="flex flex-col gap-2">
    <Card class="flex flex-col gap-4">
        <div class="flex justify-between">
            <span class="text-lg">Data Management</span>
            <md-icon>description</md-icon>
        </div>
        <div class="flex justify-between">
            <AppButton OnClick="ExportData" Type="AppButtonType.OutlineSecondary">
                <md-icon slot="icon">upload</md-icon>Backup
            </AppButton>
            <AppButton data-cy="restore-button" OnClick="ImportData" Type="AppButtonType.OutlineSecondary">
                <md-icon slot="icon">download</md-icon>Restore
            </AppButton>
        </div>
        <AppButton OnClick="NavigateToManage">
            <md-icon slot="icon">construction</md-icon>
            Manage workouts
        </AppButton>
        <AppButton Type=AppButtonType.Secondary OnClick="NavigateToProgramList">
            <md-icon slot="icon">assignment</md-icon>
            Select a plan
        </AppButton>
    </Card>
    <ProFeatureCard />

    <Card>
        <div class="flex flex-col gap-4">
            <div class="flex justify-between">
                <span class="text-lg">Configuration</span>
                <md-icon>settings</md-icon>
            </div>
            <div>
                <Switch Label="Use imperial units" Value=@SettingsState.Value.UseImperialUnits OnSwitched="SetUseImperialUnits"/>
            </div>
            <div>
                <Switch Label="Show bodyweight" Value=@SettingsState.Value.ShowBodyweight OnSwitched="SetShowBodyweight"/>
            </div>
            <md-divider></md-divider>
            <ThemeChooser
                Seed="@ThemeProvider.GetSeed()"
                ThemePreference="@ThemeProvider.GetThemePreference()"
                OnUpdateTheme="@(async a=>await HandleThemeUpdate(a))"
            />
        </div>
    </Card>
</div>


@code {
    private string ImportJson { get; set; } = "";

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Settings"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(null));
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    private void NavigateToManage()
    {
        NavigationManager.NavigateTo("/settings/manage-workouts");
    }

    private void NavigateToProgramList()
    {
        NavigationManager.NavigateTo("/settings/program-list");
    }

    private void ImportData()
    {
        Dispatcher.Dispatch(new ImportDataAction());
        Dispatcher.Dispatch(new SetStatsIsDirtyAction(true));
    }

    private void ExportData() => Dispatcher.Dispatch(new ExportDataAction());

    private void SetUseImperialUnits(bool value)
        => Dispatcher.Dispatch(new SetUseImperialUnitsAction(value));

    private void SetShowBodyweight(bool value)
        => Dispatcher.Dispatch(new SetShowBodyweightAction(value));

    private async Task HandleThemeUpdate((uint? Seed, ThemePreference ThemePreference) value)
        {
            Dispatcher.Dispatch(new SetThemeAction(value.Seed, value.ThemePreference));
            await Task.Delay(100);
            StateHasChanged();
        }

}
