@using Fluxor;
@using LiftLog.Ui.Store.App;
@using LiftLog.Ui.Store.Settings;
@using LiftLog.Ui.Services;

@page "/settings/program-list"

@inject IDispatcher Dispatcher;
@inject IState<ProgramState> ProgramState
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if(ProgramState.Value.SavedPrograms.Any())
{
    var orderedPrograms = ProgramState.Value.SavedPrograms.OrderBy(x=>x.Value.Name).ToList();
    <section class="text-start text-on-surface flex flex-col">
        <md-list>
            <ListTitle Title="@UiStrings.SavedPlans" />
            @foreach (var (id, program) in orderedPrograms)
            {
                <ProgramListItem
                    @key="id"
                    ProgramBlueprint="@program"
                    OnClick=@(() => OpenEditProgram(id))
                    OnUse="@(() => SelectProgram(id))"
                    OnDuplicate="@(() => Dispatcher.Dispatch(new SavePlanAction(Guid.NewGuid(), program)))"
                    OnShare="@(() => Dispatcher.Dispatch(new EncryptAndShareAction(new SharedProgramBlueprint(program))))"
                    OnRemove="()=>HandleRemove(id)"
                    IsActive="ProgramState.Value.ActivePlanId == id"
                    IsFocused="FocusPlanId == id"
                    BuiltIn=false/>
            }
        </md-list>
    </section>
}


<FloatingBottomContainer>
    <Fab>
        <div class="flex flex-col gap-2 items-end">
            <FloatingButton variant="primary" has-icon OnClick="AddNewPlan" Label="@UiStrings.AddPlan">
                <md-icon slot="icon">add</md-icon>
            </FloatingButton>
        </div>
    </Fab>
    <AdditionalContent>
        @if(ShowSnackBar)
        {
            <SnackBar>
                <div class="flex justify-between items-center">
                    <LimitedHtml Value="@UiStrings.SelectedPlan(ProgramState.Value.GetActivePlan().Name)" EmClass="font-bold"/>
                    <SnackBarButton OnClick=@(()=>Dispatcher.Dispatch(new NavigateAction("/")))>Go to workouts</SnackBarButton>
                </div>
            </SnackBar>
        }
    </AdditionalContent>
</FloatingBottomContainer>



@code {

    [SupplyParameterFromQuery]
    public Guid FocusPlanId { get; set; }

    private bool ShowSnackBar { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SetPageTitleAction(UiStrings.PlansPageTitle));
        Dispatcher.Dispatch(new FetchSavedProgramsAction());
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings"));
    }

    private void SelectProgram(Guid id)
    {
        Dispatcher.Dispatch(new SetActiveProgramAction(id));
        ShowSnackBar = true;
    }

    private void AddNewPlan()
    {
        var planId = Guid.NewGuid();
        Dispatcher.Dispatch(
            new SavePlanAction(
                planId,
                new ProgramBlueprint(
                    Name: UiStrings.NewPlanDefaultName,
                    Sessions: [],
                    LastEdited: DateOnly.FromDateTime(DateTime.Now))));
        Dispatcher.Dispatch(new NavigateAction("/settings/manage-workouts?planId=" + planId));
    }

    private void HandleRemove(Guid id)
    {
        if(ProgramState.Value.ActivePlanId == id)
        {
            return;
        }
        Dispatcher.Dispatch(new DeleteSavedPlanAction(id));
    }

    private void OpenEditProgram(Guid id)
    {
        Dispatcher.Dispatch(new NavigateAction("/settings/manage-workouts?planId=" + id));
    }

}
