@page "/settings/backup-and-restore"
@inject IDispatcher Dispatcher
@inject IJSRuntime JSRuntime
@inject IDeviceService DeviceService
@inject IState<SettingsState> SettingsState

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<md-list>
    <md-list-item type="button" class="text-left" multi-line-supporting-text @onclick="()=>exportFeedDialog?.Open()">
        <md-icon slot="start">backup</md-icon>
        <span slot="headline">Backup data</span>
        <span slot="supporting-text">Export your data to a file for backup or transfer</span>
    </md-list-item>
    <md-list-item type="button" class="text-left" multi-line-supporting-text @onclick="ImportData">
        <md-icon slot="start">restore</md-icon>
        <span slot="headline">Restore data</span>
        <span slot="supporting-text">Import data from a file to restore</span>
    </md-list-item>
    <md-list-item type="button" class="text-left" multi-line-supporting-text @onclick="RemoteBackup">
        <md-icon slot="start">cloud_upload</md-icon>
        <span slot="headline">Automatic remote backup</span>
        <span slot="supporting-text">Send backups to a remote server. Advanced users only</span>
    </md-list-item>
    <md-list-item type="button" class="text-left" multi-line-supporting-text @onclick="PlainTextExport">
        <md-icon slot="start">description</md-icon>
        <span slot="headline">Plaintext export</span>
        <span slot="supporting-text">Export your data in a plaintext format such as CSV for use in other applications</span>
    </md-list-item>
    <ListSwitch Headline="Backup reminders" SupportingText="Periodically suggest a backup when you have not backed up in a while" Value="@SettingsState.Value.BackupReminder" OnSwitched="SetBackupReminder" />
</md-list>


<ConfirmationDialog @ref="importFeedDialog" OkText="Import" CancelText="No" OnOk="ImportFeedData">
    <Headline>Import Feed Data?</Headline>
    <TextContent>
        <p>This backup includes a feed account. Would you like to import it?</p>
        <p>You will lose access to your current account without a backup.</p>
        <p class="text-error font-bold">This will replace your current account and cannot be undone!</p>
    </TextContent>
</ConfirmationDialog>

<ConfirmationDialog @ref="exportFeedDialog" OkText="Include Feed" CancelText="Just my data" OnOk="()=>ExportData(true)" OnCancel="()=>ExportData(false)">
    <Headline>Backup Feed Account</Headline>
    <TextContent>
        <p>Include your feed account and followed users in this backup?</p>
        <p class="text-error font-bold">Caution: This would allow anyone with this backup to post feed content with your account</p>
    </TextContent>
</ConfirmationDialog>


@if(DeviceService.GetDeviceType() == DeviceType.Web)
{
    <InputFile OnChange="LoadFiles" class="hidden" @ref=fileInput />
}

@code {

    private FeedState? importedFeedState;
    private ConfirmationDialog? importFeedDialog;
    private ConfirmationDialog? exportFeedDialog;
    private InputFile? fileInput;

    [Parameter]
    [SupplyParameterFromQuery(Name = "backup")]
    public bool Backup { get; set; }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetPageTitleAction("Export, Backup and Restore"));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings"));
        SubscribeToAction<BeginFeedImportAction>(OnBeginFeedImport);
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender && Backup)
        {
            exportFeedDialog?.Open();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        using System.IO.Compression.GZipStream gzip = new(e.File.OpenReadStream(), System.IO.Compression.CompressionMode.Decompress);
        using MemoryStream memoryStream = new();
        await gzip.CopyToAsync(memoryStream);
        Dispatcher.Dispatch(new ImportDataBytesAction(memoryStream.ToArray()));
        Dispatcher.Dispatch(new SetStatsIsDirtyAction(true));
    }

    private async Task ImportData()
    {
        if(DeviceService.GetDeviceType() == DeviceType.Web){
            await JSRuntime.InvokeVoidAsync("AppUtils.callOn", fileInput!.Element!.Value!, "click");
            return;
        }
        Dispatcher.Dispatch(new ImportDataAction());
        Dispatcher.Dispatch(new SetStatsIsDirtyAction(true));
    }

    private void RemoteBackup() => Dispatcher.Dispatch(new NavigateAction("/settings/backup-and-restore/remote-backup"));

    private void PlainTextExport() => Dispatcher.Dispatch(new NavigateAction("/settings/backup-and-restore/plain-text-export"));

    private void ExportData(bool includeFeed) => Dispatcher.Dispatch(new ExportBackupDataAction(includeFeed));

    private void OnBeginFeedImport(BeginFeedImportAction action)
    {
        importedFeedState = action.FeedState;
        importFeedDialog?.Open();
    }

    private void SetBackupReminder(bool value) => Dispatcher.Dispatch(new SetBackupReminderAction(value));

    private void ImportFeedData()
    {
        if (importedFeedState is null)
        {
            return;
        }

        Dispatcher.Dispatch(new SetFeedStateAction(importedFeedState));
        importedFeedState = null;
        importFeedDialog?.Close();
    }
}
