@page "/settings/app-config"
@inject IState<SettingsState> SettingsState
@inject IDispatcher Dispatcher
@inject IThemeProvider ThemeProvider

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<md-list>
    <ListSwitch Headline="@UiStrings.UseImperialUnits" SupportingText="@UiStrings.UseImperialUnitsSubtitle" Value="@SettingsState.Value.UseImperialUnits" OnSwitched="SetUseImperialUnits" />
    <ListSwitch Headline="@UiStrings.ShowBodyweight" SupportingText="@UiStrings.ShowBodyweightSubtitle" Value="@SettingsState.Value.ShowBodyweight" OnSwitched="SetShowBodyweight" />
    <ListSwitch data-cy="split-weight-toggle" Headline="@UiStrings.SplitWeightByDefault" SupportingText="@UiStrings.SplitWeightByDefaultSubtitle" Value="@SettingsState.Value.SplitWeightByDefault" OnSwitched="SetSplitWeightByDefault" />
    <ListSwitch Headline="@UiStrings.ShowFeed" SupportingText="@UiStrings.ShowFeedSubtitle" Value="@SettingsState.Value.ShowFeed" OnSwitched="SetShowFeed" />

    <ListSwitch Headline="@UiStrings.ShowTips" SupportingText="@UiStrings.ShowTipsSubtitle" Value="@SettingsState.Value.ShowTips" OnSwitched="SetShowTips" />
    <AppButton Type="AppButtonType.Text" OnClick="ResetTips">@UiStrings.ResetTips</AppButton>


    <ThemeChooser
        Seed="@ThemeProvider.GetSeed()"
        ThemePreference="@ThemeProvider.GetThemePreference()"
        OnUpdateTheme="@(async a => await HandleThemeUpdate(a))"/>

</md-list>


@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SetPageTitleAction(UiStrings.AppConfiguration));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings"));
    }

    private void SetUseImperialUnits(bool value)
    => Dispatcher.Dispatch(new SetUseImperialUnitsAction(value));

    private void SetShowBodyweight(bool value)
        => Dispatcher.Dispatch(new SetShowBodyweightAction(value));

    private void SetShowFeed(bool value)
        => Dispatcher.Dispatch(new SetShowFeedAction(value));

    private void SetShowTips(bool value)
        => Dispatcher.Dispatch(new SetShowTipsAction(value));

    private void SetSplitWeightByDefault(bool value)
        => Dispatcher.Dispatch(new SetSplitWeightByDefaultAction(value));

    private void ResetTips()
        => Dispatcher.Dispatch(new SetTipToShowAction(1));

    private async Task HandleThemeUpdate((uint? Seed, ThemePreference ThemePreference) value)
    {
        Dispatcher.Dispatch(new SetThemeAction(value.Seed, value.ThemePreference));
        await Task.Delay(100);
        StateHasChanged();
    }
}
