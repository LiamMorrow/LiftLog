@page "/settings/backup-and-restore/remote-backup"
@inject IDispatcher Dispatcher
@inject IState<SettingsState> SettingsState

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<Card Type="Card.CardType.Filled" class="mx-6 mb-4">
    <LimitedHtml Value="@UiStrings.RemoteBackupDescription"/>
    <AppButton OnClick="OpenDocumentation" Type="AppButtonType.Text">@UiStrings.ReadDocumentation</AppButton>
</Card>

<LabelledForm>
    <LabelledFormRow Label="@UiStrings.Endpoint" Icon="public">
        <TextField
            TextFieldType="TextFieldType.Outlined"
            placeholder="https://example.com/backup"
            Value="@EndpointValue"
            error-text="@EndpointValueError"
            error=@(HasEndpointError)
            OnChange="UpdateEndpoint"
            SelectAllOnFocus=false
            required>
        </TextField>
    </LabelledFormRow>
    <LabelledFormRow Label="@UiStrings.ApiKey" Icon="vpn_key">
        <TextField
            TextFieldType="TextFieldType.Outlined"
            Value="@ApiKeyValue"
            SelectAllOnFocus=false
            OnChange="UpdateApiKey">
        </TextField>
    </LabelledFormRow>
    <ListSwitch Headline="@UiStrings.BackupFeedAccount" SupportingText="@UiStrings.BackupFeedAccountSubtitle" Value=@IncludeFeedAccount OnSwitched="UpdateIncludeFeedAccount"/>
</LabelledForm>

<div class="flex justify-end gap-4 m-6">
    <AppButton Type="AppButtonType.Text" Disabled=@(string.IsNullOrWhiteSpace(EndpointValue)) OnClick="Test">@UiStrings.Test</AppButton>
    <AppButton Type="AppButtonType.Primary" Disabled=@HasEndpointError OnClick="Save">@UiStrings.Save</AppButton>
</div>


@code {

    private string EndpointValue = "";
    private string EndpointValueError = "";

    private bool HasEndpointError => !string.IsNullOrWhiteSpace(EndpointValueError);
    private string ApiKeyValue = "";

    private bool IncludeFeedAccount = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SetPageTitleAction(@UiStrings.AutomaticRemoteBackup));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings/backup-and-restore"));
        SubscribeToAction<RemoteBackupSucceededEvent>(OnRemoteBackupSucceeded);
        EndpointValue = SettingsState.Value.RemoteBackupSettings.Endpoint;
        ApiKeyValue = SettingsState.Value.RemoteBackupSettings.ApiKey;
        IncludeFeedAccount = SettingsState.Value.RemoteBackupSettings.IncludeFeedAccount;
    }

    private void Test(MouseEventArgs _)
    {
        Dispatcher.Dispatch(new ExecuteRemoteBackupAction(new(EndpointValue, ApiKeyValue, IncludeFeedAccount), Force: true));
    }

    private void Save(MouseEventArgs _)
    {
        if(HasEndpointError)
        {
            return;
        }
        Dispatcher.Dispatch(new UpdateRemoteBackupSettingsAction(new(EndpointValue, ApiKeyValue, IncludeFeedAccount)));
        Dispatcher.Dispatch(new ToastAction(UiStrings.SettingsSaved));
    }

    private void OpenDocumentation(MouseEventArgs _)
    {
        Dispatcher.Dispatch(new OpenExternalUrlAction("https://github.com/LiamMorrow/LiftLog/blob/main/Docs/RemoteBackup.md"));
    }

    private void UpdateEndpoint(string endpoint)
    {
        EndpointValue = endpoint;
        StateHasChanged();
        if(!string.IsNullOrWhiteSpace(endpoint) && !endpoint.StartsWith("https://"))
        {
            EndpointValueError = "Endpoint must start with https://";
        }
        else
        {
            EndpointValueError = "";
        }
    }

    private void UpdateApiKey(string apiKey)
    {
        ApiKeyValue = apiKey;
        StateHasChanged();
    }

    private void UpdateIncludeFeedAccount(bool includeFeedAccount)
    {
        IncludeFeedAccount = includeFeedAccount;
        StateHasChanged();
    }

    private void OnRemoteBackupSucceeded(RemoteBackupSucceededEvent _)
    {
        Dispatcher.Dispatch(new ToastAction(UiStrings.BackupSentSuccessfully));
    }
}
