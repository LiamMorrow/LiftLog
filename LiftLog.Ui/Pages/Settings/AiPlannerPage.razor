@using Fluxor
@using LiftLog.Ui.Services
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.Settings
@using System.Text.Json

@page "/settings/ai-planner"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
@inject IState<SettingsState> SettingsState

@if (SettingsState.Value.IsGeneratingAiPlan)
{
    <Loader>
        <LimitedHtml Value="@UiStrings.GeneratingAiPlan" EmClass="text-xs" />
    </Loader>
}
else if (SettingsState.Value.AiPlan != null)
{
    <div class="flex flex-col gap-2">
        <CardList Items="SettingsState.Value.AiPlan.Sessions">
            <SessionBlueprintSummary SessionBlueprint="context"/>
        </CardList>
        <p class="text-on-surface">@UiStrings.NoteAboutTweakingAiPlan</p>
        <div class="flex flex-col gap-2 mt-2">
            <AppButton Icon="done" OnClick="() => AcceptAiPlan(SettingsState.Value.AiPlan)">
                @UiStrings.Accept
            </AppButton>
            <div class="grid grid-cols-2 grid-rows-1 gap-2">
                <AppButton Icon="close" Type="AppButtonType.Secondary" OnClick="() => Dispatcher.Dispatch(new SetAiPlanAction(null))">
                    @UiStrings.Cancel
                </AppButton>
                <AppButton Type="AppButtonType.Secondary"
                            Icon="refresh"
                            OnClick="() => Dispatcher.Dispatch(new GenerateAiPlanAction(SettingsState.Value.AiWorkoutAttributes!))">
                    @UiStrings.Regenerate
                </AppButton>
            </div>
        </div>
    </div>
}
else if (SettingsState.Value.AiPlanError != null)
{
    <div class="flex flex-col gap-2">
        <p class="text-on-surface">@SettingsState.Value.AiPlanError</p>
        <div class="grid grid-cols-2 grid-rows-1 gap-2">
            <AppButton Icon="close" Type="AppButtonType.Secondary" OnClick="() => Dispatcher.Dispatch(new SetAiPlanErrorAction(null))">
                @UiStrings.Cancel
            </AppButton>
            <AppButton
                Icon="refresh"
                OnClick="() => Dispatcher.Dispatch(new GenerateAiPlanAction(SettingsState.Value.AiWorkoutAttributes!))">
                @UiStrings.Retry
            </AppButton>
        </div>
    </div>
}
else
{
    <AiWorkoutWalkthrough OnAttributesSelected="attributes => Dispatcher.Dispatch(new GenerateAiPlanAction(attributes))"/>
}

@code {



    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SetPageTitleAction(UiStrings.AiPlanner));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings"));
    }

    private void AcceptAiPlan(AiWorkoutPlan plan)
    {
        var planId = Guid.NewGuid();
        Dispatcher.Dispatch(new CreateSavedPlanAction(planId, "AI Plan"));
        Dispatcher.Dispatch(new SetProgramSessionsAction(planId, plan.Sessions));
        Dispatcher.Dispatch(new SetAiPlanAction(null));
        Dispatcher.Dispatch(new PublishIdentityIfEnabledAction());
        Dispatcher.Dispatch(new SetLatestSettingsUrlAction(null));
        Dispatcher.Dispatch(new NavigateAction("/settings/program-list?FocusPlanId="+planId));
    }

}
