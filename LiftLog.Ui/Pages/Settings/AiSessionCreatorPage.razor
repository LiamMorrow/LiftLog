@page "/settings/ai-session-creator"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using LiftLog.Lib.Services;

@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
@inject IState<AiSessionCreatorState> AiSessionCreatorState
@inject IState<ProgramState> ProgramState
@inject IState<SettingsState> SettingsState

@if (AiSessionCreatorState.Value.IsLoading)
{
    <Loader>
        <LimitedHtml Value="@UiStrings.GeneratingAiPlan" EmClass="text-xs" />
    </Loader>
}
else if (AiSessionCreatorState.Value.ErrorMessage is not null)
{
    <div class="flex flex-col justify-center h-full gap-4 text-on-surface">
        <div>
            <md-icon>error</md-icon>
        </div>
        <span>
            <p>@AiSessionCreatorState.Value.ErrorMessage</p>
        </span>
        <div class="grid grid-cols-2 gap-2">
            <AppButton Type=AppButtonType.Text OnClick=@HandleCancel>@UiStrings.Back</AppButton>
            <AppButton Type=AppButtonType.Text OnClick=@(()=>Dispatcher.Dispatch(new ClearAiGeneratedSessionStateAction()))>@UiStrings.Retry</AppButton>
        </div>
    </div>
}
else if (AiSessionCreatorState.Value.GeneratedSession is not null)
{
    <div class="flex flex-col gap-5 text-on-surface h-full px-2">
        <Card class="flex flex-col gap-2">
            <SessionBlueprintSummary SessionBlueprint="AiSessionCreatorState.Value.GeneratedSession"/>
            <div class="grid  gap-2">
                <AppButton Type=AppButtonType.Text OnClick=@(()=>Dispatcher.Dispatch(new ClearAiGeneratedSessionStateAction()))>@UiStrings.Regenerate</AppButton>
            </div>
        </Card>
        <div class="flex flex-col gap-2 justify-end h-full">
            <div class="grid grid-cols-2 gap-2">
                <AppButton Icon="assignment_add" Type=AppButtonType.Secondary OnClick=@AddToPlan>
                    @UiStrings.AddToPlan
                </AppButton>
                <AppButton Icon="fitness_center" OnClick=@StartSession>@UiStrings.Start</AppButton>
            </div>
        </div>
    </div>
}
else
{
    <div class="flex flex-col gap-5 text-on-surface h-full">
        <AiSessionCreator Value="Model" OnChange="(v) => Model = v"/>
        @if (ValidationError is not null)
        {
            <span class="flex items-center justify-center gap-2">
                <md-icon>info</md-icon>@ValidationError
            </span>
        }
    </div>

    @if(IsInActiveScreen)
    {
        <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="TrailingTitleButton">
            <AppButton class="text-lg" Type=AppButtonType.Text OnClick=HandleGenerateSession Disabled=@(ValidationError is not null) >@UiStrings.Generate</AppButton>
        </Microsoft.AspNetCore.Components.Sections.SectionContent>
    }
}

@code {

    private AiSessionCreatorModel Model { get; set; } = new AiSessionCreatorModel([], 50, "");

    [CascadingParameter(Name = "IsInActiveScreen")]
    public bool IsInActiveScreen { get; set; }

    private LocalizedString? ValidationError => Model switch
    {
        var m when m.AreasToWorkout.Count == 0 => UiStrings.SelectAtLeastOneArea,
        _ => null
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SetPageTitleAction(@UiStrings.AiSessionCreator));
    }

    private void HandleGenerateSession()
    {
        Dispatcher.Dispatch(new SetAiSessionErrorMessageAction(null));
        Dispatcher.Dispatch(new GenerateAiSessionAction(Model, SettingsState.Value.UseImperialUnits));
    }

    private void HandleCancel()
    {
        Dispatcher.Dispatch(new ClearAiGeneratedSessionStateAction());
    }

    private void AddToPlan()
    {
        if (AiSessionCreatorState.Value.GeneratedSession is null)
        {
            return;
        }

        Dispatcher.Dispatch(new AddProgramSessionAction(ProgramState.Value.ActivePlanId, AiSessionCreatorState.Value.GeneratedSession));
        NavigationManager.NavigateTo("/settings/manage-workouts?planId=" + ProgramState.Value.ActivePlanId);
        Dispatcher.Dispatch(new ClearAiGeneratedSessionStateAction());
    }

    private void StartSession()
    {
        if (AiSessionCreatorState.Value.GeneratedSession is null)
        {
            return;
        }

        Dispatcher.Dispatch(new SetCurrentSessionFromBlueprintAction(SessionTarget.WorkoutSession,
            AiSessionCreatorState.Value.GeneratedSession));
        NavigationManager.NavigateTo("/session");
        Dispatcher.Dispatch(new ClearAiGeneratedSessionStateAction());
    }

}
