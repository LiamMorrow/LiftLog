@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor
@using System.Text.RegularExpressions

@page "/settings/manage-workouts"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<ProgramState> ProgramState
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
@inject IJSRuntime JSRuntime

@if(ProgramState.Value.SavedPrograms.ContainsKey(PlanId)){
    <TextField
        Label="@UiStrings.PlanName"
        TextFieldType="TextFieldType.Filled"
        Value="@ProgramState.Value.SavedPrograms[PlanId].Name"
        class="m-2"
        OnChange="@((val) => Dispatcher.Dispatch(new SetSavedPlanNameAction(PlanId, val ?? "")))" />


    @if (!ProgramState.Value.GetSessionBlueprints(PlanId).Any())
    {
        <EmptyInfo>
            @UiStrings.NoWorkoutsInPlan
        </EmptyInfo>
    }
    <CardList Items="ProgramState.Value.GetSessionBlueprints(PlanId).Index()" OnClick="(item) => SelectSession(item.Item, item.Index)">
        @{
            var session = context.Item;
            var index = context.Index;
        }
        <ManageWorkoutCardContent
            SessionBlueprint="session"
            OnMoveSessionUp="() => MoveSessionUp(session)"
            OnMoveSessionDown="() => MoveSessionDown(session)"
            OnRemoveSession="() => RemoveSession(session)"
            OnDuplicateSession="() => DuplicateSession(session)"/>
    </CardList>

    <FloatingBottomContainer>
        <Fab>
            <FloatingButton size="small" variant="surface" aria-label="Add Session" label="@UiStrings.AddWorkout" OnClick="AddSession"><md-icon slot="icon">add</md-icon></FloatingButton>
        </Fab>
    </FloatingBottomContainer>

    @if(IsInActiveScreen && ProgramState.Value.ActivePlanId != PlanId)
    {
        <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="TrailingTitleButton">
            <AppButton class="text-lg" Type=AppButtonType.Text OnClick=UseSession>@UiStrings.UseWorkout</AppButton>
        </Microsoft.AspNetCore.Components.Sections.SectionContent>
    }
}
@code {
    [SupplyParameterFromQuery(Name = "planId")]
    [Parameter] public Guid PlanId { get; set; }

    [CascadingParameter(Name = "IsInActiveScreen")]
    public bool IsInActiveScreen { get; set; }

    void MoveSessionUp(SessionBlueprint sessionBlueprint)
        => Dispatcher.Dispatch(new MoveSessionBlueprintUpInProgramAction(PlanId, sessionBlueprint));

    void MoveSessionDown(SessionBlueprint sessionBlueprint)
        => Dispatcher.Dispatch(new MoveSessionBlueprintDownInProgramAction(PlanId, sessionBlueprint));

    void RemoveSession(SessionBlueprint sessionBlueprint)
        => Dispatcher.Dispatch(new RemoveSessionFromProgramAction(PlanId, sessionBlueprint));

    void BackToSettings() => NavigationManager.NavigateTo("/settings");

    void SelectSession(SessionBlueprint sessionBlueprint, int index)
    {
        Dispatcher.Dispatch(new SetEditingSessionAction(sessionBlueprint));
        NavigationManager.NavigateTo($"/settings/manage-workouts/manage-session/{index}?planId={PlanId}");
    }

    void AddSession()
    {
        Dispatcher.Dispatch(
            new AddProgramSessionAction(
                PlanId,
                SessionBlueprint.Empty with { Name = $"{UiStrings.Workout} {ProgramState.Value.GetSessionBlueprints(PlanId).Count + 1}" })
        );
        SelectSession(ProgramState.Value.GetSessionBlueprints(PlanId).Last(), ProgramState.Value.GetSessionBlueprints(PlanId).Count - 1);
    }

    void DuplicateSession(SessionBlueprint sessionBlueprint) => Dispatcher.Dispatch(
        new AddProgramSessionAction(
            PlanId,
            sessionBlueprint with
            {
                Name = $"{UiStrings.Workout} {ProgramState.Value.GetSessionBlueprints(PlanId).Count + 1}"
            }
        )
    );

    void UseSession()
    {
        Dispatcher.Dispatch(new SetActiveProgramAction(PlanId));
        Dispatcher.Dispatch(new NavigateAction("/"));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var title = UiStrings.ManageWorkout(ProgramState.Value.SavedPrograms[PlanId].Name);
        Dispatcher.Dispatch(new SetPageTitleAction(title));
        Dispatcher.Dispatch(new SetBackNavigationUrlAction("/settings/program-list"));
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        Dispatcher.Dispatch(new PublishIdentityIfEnabledAction());
        return  base.DisposeAsyncCore(disposing);
    }

}
