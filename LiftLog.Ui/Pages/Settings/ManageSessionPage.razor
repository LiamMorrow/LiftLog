@using Fluxor
@using LiftLog.Ui.Store.App
@using LiftLog.Ui.Store.Program
@using LiftLog.Ui.Store.SessionEditor

@page "/settings/manage-workouts/manage-session/{sessionIndex:int}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject NavigationManager NavigationManager
@inject IState<SessionEditorState> SessionEditorState
@inject IState<ProgramState> ProgramState
@inject IDispatcher Dispatcher
@inject IJSRuntime JSRuntime

@if (SessionEditorState.Value.SessionBlueprint is not null)
{
    <div class="bg-surface pt-2">

        <LabelledForm>
            <LabelledFormRow Label="Session Name" Icon="assignment">
                <TextField
                    TextFieldType="TextFieldType.Filled"
                    Value="@SessionEditorState.Value.SessionBlueprint.Name"
                    OnChange="@((val) => SetName(val!))">
                </TextField>
            </LabelledFormRow>
            <LabelledFormRow Label="Session Notes" Icon="notes">
                <TextField
                    TextFieldType="TextFieldType.Filled"
                    Value="@SessionEditorState.Value.SessionBlueprint.Notes"
                    type="textarea"
                    SelectAllOnFocus="false"
                    class="resize-y"
                    OnChange="@((val) => SetNotes(val!))">
                </TextField>
            </LabelledFormRow>
            <LabelledFormRow Label="Exercises" Icon="fitness_center">
                @if(SessionEditorState.Value.SessionBlueprint.Exercises.Count == 0)
                {
                    <Card Type="Card.CardType.Filled">
                        <div class="flex flex-col items-center">
                            <span class="text-on-surface">No exercises added yet</span>
                        </div>
                    </Card>
                }
                <ItemList Items="SessionEditorState.Value.SessionBlueprint.Exercises.IndexedTuples()" VerticalPadding=false class="-mx-6" Dividers=false >
                    @{
                        var exercise = context.Item;
                        var index = context.Index;
                    }
                    <ExerciseBlueprintSummary  Blueprint="@exercise" OnEdit="()=>BeginEditExercise(exercise,index)" OnMoveDown="()=>MoveExerciseDown(exercise)" OnMoveUp="()=>MoveExerciseUp(exercise)" OnRemove="()=>BeginRemoveExercise(exercise)" />
                </ItemList>
            </LabelledFormRow>
        </LabelledForm>

    </div>
    <FloatingBottomContainer>
        <Fab>
            <FloatingButton size="small" variant="surface" aria-label="Add Exercise" label="Add Exercise" OnClick="BeginAddExercise"><md-icon slot="icon">add</md-icon></FloatingButton>
        </Fab>
    </FloatingBottomContainer>
}

<FullScreenDialog @ref=editDialog Title=@(isAddingExercise ? "Add Exercise" : "Edit Exercise") Action="Save" OnAction="UpdateExercise" >
    @if(selectedExercise is not null)
    {
        <ExerciseEditor Exercise="selectedExercise" UpdateExercise="(ex) => {selectedExercise = ex; StateHasChanged();}" />
    }
</FullScreenDialog>

<Dialog @ref="deleteDialog">
    <span slot="headline">Remove Exercise?</span>
    <span slot="content" class="block text-left">This will remove the exercise <span class="font-bold text-primary">"@(selectedExercise?.Name)"</span> from <span class="font-bold text-primary">@SessionEditorState.Value.SessionBlueprint?.Name</span>.</span>
    <div slot="actions">
        <AppButton Type="AppButtonType.Text" OnClick="() => { deleteDialog?.Close(); }">Cancel</AppButton>
        <AppButton Type="AppButtonType.Text" OnClick="RemoveExercise">Remove</AppButton>
    </div>
</Dialog>


@code {
    [Parameter][SupplyParameterFromQuery(Name="editingExercise")] public int? EditingExerciseIndexParam { get; set; }
    [Parameter] public int SessionIndex { get; set; }

    [SupplyParameterFromQuery(Name = "planId")]
    [Parameter] public Guid PlanId { get; set; }

    [CascadingParameter(Name = "IsInActiveScreen")]
    public bool IsInActiveScreen { get; set; }

    private bool isAddingExercise;
    private int selectedExerciseIndex;
    private ExerciseBlueprint? selectedExercise;
    private Dialog? deleteDialog;

    private FullScreenDialog? editDialog;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && EditingExerciseIndexParam is not null && SessionEditorState is {Value: {SessionBlueprint: not null}})
        {
            BeginEditExercise(SessionEditorState.Value.SessionBlueprint.Exercises[EditingExerciseIndexParam.Value], EditingExerciseIndexParam.Value);
        }
        base.OnAfterRender(firstRender);
    }


    void MoveExerciseUp(ExerciseBlueprint exerciseBlueprint)
    {
        Dispatcher.Dispatch(new MoveExerciseUpAction(exerciseBlueprint));
        SaveSession();
    }

    void MoveExerciseDown(ExerciseBlueprint exerciseBlueprint)
    {
        Dispatcher.Dispatch(new MoveExerciseDownAction(exerciseBlueprint));
        SaveSession();
    }

    void BeginEditExercise(ExerciseBlueprint exerciseBlueprint, int index)
    {
        selectedExerciseIndex = index;
        selectedExercise = exerciseBlueprint;
        isAddingExercise = false;
        editDialog?.Open();
    }

    void BeginRemoveExercise(ExerciseBlueprint exerciseBlueprint)
    {
        selectedExercise = exerciseBlueprint;
        deleteDialog?.Open();
    }

    void RemoveExercise()
    {
        if(selectedExercise is not null)
        {
            Dispatcher.Dispatch(new RemoveExerciseAction(selectedExercise));
            SaveSession();
        }
        deleteDialog?.Close();
    }

    void SaveSession()
    {
        if (SessionEditorState.Value.SessionBlueprint is not null)
        {
            Dispatcher.Dispatch(new SetProgramSessionAction(PlanId, SessionIndex, SessionEditorState.Value.SessionBlueprint));
        }
    }

    void BeginAddExercise()
    {
        selectedExercise = new ExerciseBlueprint(
                $"Exercise {SessionEditorState.Value.SessionBlueprint?.Exercises.Count + 1}",
                3,
                10,
                2.5m,
                new Rest(TimeSpan.FromSeconds(90), TimeSpan.FromMinutes(3), TimeSpan.FromMinutes(5)),
                false,
                "",
                "");
        isAddingExercise = true;
        editDialog?.Open();
    }

    async Task AddExercise()
    {
        if(selectedExercise is not null)
        {
            Dispatcher.Dispatch(new AddExerciseAction(selectedExercise));
            SaveSession();
            await Task.Yield();
            await JSRuntime.InvokeVoidAsync("AppUtils.smoothScrollAndFocusLast", "[data-cy=\"exercise-name\"]");
        }
    }

    async void UpdateExercise()
    {
        if (selectedExercise is not null && !isAddingExercise)
        {
            Dispatcher.Dispatch(new UpdateSessionExerciseAction(selectedExerciseIndex, selectedExercise));
            SaveSession();
        }
        else if(selectedExercise is not null && isAddingExercise)
        {
            await AddExercise();
        }
    }


    void SetName(string name)
    {
        Dispatcher.Dispatch(new SetEditingSessionNameAction(name));
        SaveSession();
    }

    void SetNotes(string notes){
        Dispatcher.Dispatch(new SetEditingSessionNotesAction(notes));
        SaveSession();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SetPageTitleAction("Manage Session"));
        var backPath = "/settings/manage-workouts?planId=" + PlanId;
        Dispatcher.Dispatch(new SetBackNavigationUrlAction(backPath));
        if (ProgramState.Value.GetSessionBlueprints(PlanId).Count - 1 < SessionIndex)
        {
            Dispatcher.Dispatch(new NavigateAction(backPath));
        }
        else
        {
            Dispatcher.Dispatch(new SetEditingSessionAction(ProgramState.Value.GetSessionBlueprints(PlanId)[SessionIndex]));
        }
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        Dispatcher.Dispatch(new PublishIdentityIfEnabledAction());
        return base.DisposeAsyncCore(disposing);
    }

}
