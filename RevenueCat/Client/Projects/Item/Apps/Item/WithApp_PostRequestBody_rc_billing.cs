// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using RevenueCat.Client.Models;
using System.Collections.Generic;
using System.IO;
using System;
namespace RevenueCat.Client.Projects.Item.Apps.Item
{
    /// <summary>
    /// Web Billing type details. Should only be used when type is rc_billing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithApp_PostRequestBody_rc_billing : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Shown in checkout, emails, and receipts sent to customers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppName { get; set; }
#nullable restore
#else
        public string AppName { get; set; }
#endif
        /// <summary>ISO 4217 currency code</summary>
        public global::RevenueCat.Client.Models.RCBillingCurrency? DefaultCurrency { get; set; }
        /// <summary>It needs to be connected to your RevenueCat account. It can be omitted if you only have a single Stripe account connected to your RevenueCat account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StripeAccountId { get; set; }
#nullable restore
#else
        public string StripeAccountId { get; set; }
#endif
        /// <summary>Used as the `reply to` address in all emails sent to customers, to allow them to receive support. If you leave this field blank, your RevenueCat account email address will be used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportEmail { get; set; }
#nullable restore
#else
        public string SupportEmail { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_PostRequestBody_rc_billing"/> and sets the default values.
        /// </summary>
        public WithApp_PostRequestBody_rc_billing()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_PostRequestBody_rc_billing"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_PostRequestBody_rc_billing CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::RevenueCat.Client.Projects.Item.Apps.Item.WithApp_PostRequestBody_rc_billing();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "app_name", n => { AppName = n.GetStringValue(); } },
                { "default_currency", n => { DefaultCurrency = n.GetEnumValue<global::RevenueCat.Client.Models.RCBillingCurrency>(); } },
                { "stripe_account_id", n => { StripeAccountId = n.GetStringValue(); } },
                { "support_email", n => { SupportEmail = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("app_name", AppName);
            writer.WriteEnumValue<global::RevenueCat.Client.Models.RCBillingCurrency>("default_currency", DefaultCurrency);
            writer.WriteStringValue("stripe_account_id", StripeAccountId);
            writer.WriteStringValue("support_email", SupportEmail);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
