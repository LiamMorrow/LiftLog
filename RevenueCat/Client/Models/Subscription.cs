// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace RevenueCat.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Subscription : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The auto renewal status of a subscription.&lt;br&gt;&lt;br&gt;Possible values:&lt;br&gt;• `will_renew`: the subscription is currently set to automatically renew&lt;br&gt;• `will_not_renew`: the subscription is currently set to expire at the end of the period&lt;br&gt;• `will_change_product`: the subscription is currently set to change product at the end of the period (which might start a new subscription)&lt;br&gt;• `will_pause`: the subscription is currently set to pause at the end of the current period&lt;br&gt;• `requires_price_increase_consent`: the subscription will expire at the end of the current period unless the customer consents to the price increase&lt;br&gt;• `has_already_renewed`: the customer has already been charged for the upcoming renewal (so the renewal will take place even if the customer opts out of auto-renewal before the end of the period)</summary>
        public global::RevenueCat.Client.Models.Subscription_auto_renewal_status? AutoRenewalStatus { get; set; }
        /// <summary>The country that the object is associated with, in ISO alpha 2 code</summary>
        public global::RevenueCat.Client.Models.Country? Country { get; set; }
        /// <summary>The date when the subscription billing period is expected to end in ms since epoch. Can be null if the subscription is paused until an indefinite date.</summary>
        public long? CurrentPeriodEndsAt { get; set; }
        /// <summary>The date when the subscription billing period started in ms since epoch</summary>
        public long? CurrentPeriodStartsAt { get; set; }
        /// <summary>The ID of the customer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>The entitlements property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::RevenueCat.Client.Models.Subscription_entitlements? Entitlements { get; set; }
#nullable restore
#else
        public global::RevenueCat.Client.Models.Subscription_entitlements Entitlements { get; set; }
#endif
        /// <summary>The store environment</summary>
        public global::RevenueCat.Client.Models.EnvironmentObject? Environment { get; set; }
        /// <summary>Determines whether the customer should currently be provided access to the entitlements associated with the subscription</summary>
        public bool? GivesAccess { get; set; }
        /// <summary>The ID of the subscription (generated by RevenueCat)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The URL to manage the subscription</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagementUrl { get; set; }
#nullable restore
#else
        public string ManagementUrl { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::RevenueCat.Client.Models.Subscription_object? Object { get; set; }
        /// <summary>The ID of the original customer. Relevant for subscriptions that were transferred from one customer to another</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalCustomerId { get; set; }
#nullable restore
#else
        public string OriginalCustomerId { get; set; }
#endif
        /// <summary>Ownership of the subscription</summary>
        public global::RevenueCat.Client.Models.Ownership? Ownership { get; set; }
        /// <summary>Indicates pending product changes. Present if the `auto_renewal_status` is `will_change_product`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::RevenueCat.Client.Models.Subscription_pending_changes? PendingChanges { get; set; }
#nullable restore
#else
        public global::RevenueCat.Client.Models.Subscription_pending_changes PendingChanges { get; set; }
#endif
        /// <summary>Determines whether there is a pending payment associated with the subscription</summary>
        public bool? PendingPayment { get; set; }
        /// <summary>The ID of the offering the customer saw when purchasing the subscription</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PresentedOfferingId { get; set; }
#nullable restore
#else
        public string PresentedOfferingId { get; set; }
#endif
        /// <summary>The RevenueCat ID of the product that the customer is subscribed to. Exists for all store types except for promotional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductId { get; set; }
#nullable restore
#else
        public string ProductId { get; set; }
#endif
        /// <summary>The date when the subscription originally started in ms since epoch</summary>
        public long? StartsAt { get; set; }
        /// <summary>The status of a subscription. Please note that additional states might be added in the future. To determine whether or not a subscription currently provides access to any associated entitlements, use the _gives_access_ field.&lt;br&gt;&lt;br&gt;Possible values:&lt;br&gt;• `trialing`: the subscription is in a free trial period&lt;br&gt;• `active`: the subscription is active, in a paid period&lt;br&gt;• `expired`: the subscription is expired and no longer active&lt;br&gt;• `in_grace_period`: the subscription is past its regular expiry date and experienced a billing issue, but is currently still in an access-granting grace period&lt;br&gt;• `in_billing_retry`: the subscription has experienced a billing issue. Billing is being retried, access is suspended.-paused: the subscription is currently paused and should not provide access.&lt;br&gt;• `unknown`: the subscription is in an unknown state. Refer to the _gives_access_ field to determine whether or not to grant access.&lt;br&gt;• `incomplete`: the subscription is in an incomplete state, maybe due to incorrect billing details or because it&apos;s scheduled to start in the future.</summary>
        public global::RevenueCat.Client.Models.Subscription_status? Status { get; set; }
        /// <summary>Store the subscription belongs to</summary>
        public global::RevenueCat.Client.Models.Subscription_store? Store { get; set; }
        /// <summary>The subscription identifier as per the store (e.g, for Apple App Store, the `transaction_id` of the latest transaction of the subscription, or for Google Play Store, the Order ID of the last renewal of the subscription)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StoreSubscriptionIdentifier { get; set; }
#nullable restore
#else
        public string StoreSubscriptionIdentifier { get; set; }
#endif
        /// <summary>Total revenue generated by a subscription in USD</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::RevenueCat.Client.Models.MonetaryAmount? TotalRevenueInUsd { get; set; }
#nullable restore
#else
        public global::RevenueCat.Client.Models.MonetaryAmount TotalRevenueInUsd { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::RevenueCat.Client.Models.Subscription"/> and sets the default values.
        /// </summary>
        public Subscription()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::RevenueCat.Client.Models.Subscription"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::RevenueCat.Client.Models.Subscription CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::RevenueCat.Client.Models.Subscription();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auto_renewal_status", n => { AutoRenewalStatus = n.GetEnumValue<global::RevenueCat.Client.Models.Subscription_auto_renewal_status>(); } },
                { "country", n => { Country = n.GetEnumValue<global::RevenueCat.Client.Models.Country>(); } },
                { "current_period_ends_at", n => { CurrentPeriodEndsAt = n.GetLongValue(); } },
                { "current_period_starts_at", n => { CurrentPeriodStartsAt = n.GetLongValue(); } },
                { "customer_id", n => { CustomerId = n.GetStringValue(); } },
                { "entitlements", n => { Entitlements = n.GetObjectValue<global::RevenueCat.Client.Models.Subscription_entitlements>(global::RevenueCat.Client.Models.Subscription_entitlements.CreateFromDiscriminatorValue); } },
                { "environment", n => { Environment = n.GetEnumValue<global::RevenueCat.Client.Models.EnvironmentObject>(); } },
                { "gives_access", n => { GivesAccess = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "management_url", n => { ManagementUrl = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::RevenueCat.Client.Models.Subscription_object>(); } },
                { "original_customer_id", n => { OriginalCustomerId = n.GetStringValue(); } },
                { "ownership", n => { Ownership = n.GetEnumValue<global::RevenueCat.Client.Models.Ownership>(); } },
                { "pending_changes", n => { PendingChanges = n.GetObjectValue<global::RevenueCat.Client.Models.Subscription_pending_changes>(global::RevenueCat.Client.Models.Subscription_pending_changes.CreateFromDiscriminatorValue); } },
                { "pending_payment", n => { PendingPayment = n.GetBoolValue(); } },
                { "presented_offering_id", n => { PresentedOfferingId = n.GetStringValue(); } },
                { "product_id", n => { ProductId = n.GetStringValue(); } },
                { "starts_at", n => { StartsAt = n.GetLongValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::RevenueCat.Client.Models.Subscription_status>(); } },
                { "store", n => { Store = n.GetEnumValue<global::RevenueCat.Client.Models.Subscription_store>(); } },
                { "store_subscription_identifier", n => { StoreSubscriptionIdentifier = n.GetStringValue(); } },
                { "total_revenue_in_usd", n => { TotalRevenueInUsd = n.GetObjectValue<global::RevenueCat.Client.Models.MonetaryAmount>(global::RevenueCat.Client.Models.MonetaryAmount.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::RevenueCat.Client.Models.Subscription_auto_renewal_status>("auto_renewal_status", AutoRenewalStatus);
            writer.WriteEnumValue<global::RevenueCat.Client.Models.Country>("country", Country);
            writer.WriteLongValue("current_period_ends_at", CurrentPeriodEndsAt);
            writer.WriteLongValue("current_period_starts_at", CurrentPeriodStartsAt);
            writer.WriteStringValue("customer_id", CustomerId);
            writer.WriteObjectValue<global::RevenueCat.Client.Models.Subscription_entitlements>("entitlements", Entitlements);
            writer.WriteEnumValue<global::RevenueCat.Client.Models.EnvironmentObject>("environment", Environment);
            writer.WriteBoolValue("gives_access", GivesAccess);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("management_url", ManagementUrl);
            writer.WriteEnumValue<global::RevenueCat.Client.Models.Subscription_object>("object", Object);
            writer.WriteStringValue("original_customer_id", OriginalCustomerId);
            writer.WriteEnumValue<global::RevenueCat.Client.Models.Ownership>("ownership", Ownership);
            writer.WriteObjectValue<global::RevenueCat.Client.Models.Subscription_pending_changes>("pending_changes", PendingChanges);
            writer.WriteBoolValue("pending_payment", PendingPayment);
            writer.WriteStringValue("presented_offering_id", PresentedOfferingId);
            writer.WriteStringValue("product_id", ProductId);
            writer.WriteLongValue("starts_at", StartsAt);
            writer.WriteEnumValue<global::RevenueCat.Client.Models.Subscription_status>("status", Status);
            writer.WriteEnumValue<global::RevenueCat.Client.Models.Subscription_store>("store", Store);
            writer.WriteStringValue("store_subscription_identifier", StoreSubscriptionIdentifier);
            writer.WriteObjectValue<global::RevenueCat.Client.Models.MonetaryAmount>("total_revenue_in_usd", TotalRevenueInUsd);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
