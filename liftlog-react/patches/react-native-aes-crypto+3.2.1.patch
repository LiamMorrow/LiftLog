--- a/node_modules/react-native-aes-crypto/android/src/main/java/com/tectiv3/aes/Aes.java
+++ b/node_modules/react-native-aes-crypto/android/src/main/java/com/tectiv3/aes/Aes.java
@@ -59,9 +59,9 @@ public class Aes extends ReactContextBaseJavaModule {
     }

     @ReactMethod
-    public void encrypt(String data, String key, String iv, String algorithm, Promise promise) {
+    public void encrypt(String dataBase64, String key, String iv, String algorithm, Promise promise) {
         try {
-            String result = encrypt(data, key, iv, algorithm.toLowerCase().contains("cbc")?CIPHER_CBC_ALGORITHM:CIPHER_CTR_ALGORITHM);
+            String result = encrypt(dataBase64, key, iv, algorithm.toLowerCase().contains("cbc")?CIPHER_CBC_ALGORITHM:CIPHER_CTR_ALGORITHM);
             promise.resolve(result);
         } catch (Exception e) {
             promise.reject("-1", e.getMessage());
@@ -114,9 +114,9 @@ public class Aes extends ReactContextBaseJavaModule {
     }

     @ReactMethod
-    public void sha256(String data, Promise promise) {
+    public void sha256(String dataBase64, Promise promise) {
         try {
-            String result = shaX(data, "SHA-256");
+            String result = shaX(dataBase64, "SHA-256");
             promise.resolve(result);
         } catch (Exception e) {
             promise.reject("-1", e.getMessage());
@@ -166,9 +166,9 @@ public class Aes extends ReactContextBaseJavaModule {
         }
     }

-    private String shaX(String data, String algorithm) throws Exception {
+    private String shaX(String dataBase64, String algorithm) throws Exception {
         MessageDigest md = MessageDigest.getInstance(algorithm);
-        md.update(data.getBytes());
+        md.update(Base64.decode(dataBase64, Base64.NO_WRAP));
         byte[] digest = md.digest();
         return bytesToHex(digest);
     }
@@ -215,8 +215,8 @@ public class Aes extends ReactContextBaseJavaModule {

     final static IvParameterSpec emptyIvSpec = new IvParameterSpec(new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

-    private static String encrypt(String text, String hexKey, String hexIv, String algorithm) throws Exception {
-        if (text == null || text.length() == 0) {
+    private static String encrypt(String base64Text, String hexKey, String hexIv, String algorithm) throws Exception {
+        if (base64Text == null || base64Text.length() == 0) {
             return null;
         }

@@ -225,7 +225,7 @@ public class Aes extends ReactContextBaseJavaModule {

         Cipher cipher = Cipher.getInstance(algorithm);
         cipher.init(Cipher.ENCRYPT_MODE, secretKey, hexIv == null ? emptyIvSpec : new IvParameterSpec(Hex.decode(hexIv)));
-        byte[] encrypted = cipher.doFinal(text.getBytes("UTF-8"));
+        byte[] encrypted = cipher.doFinal(Base64.decode(base64Text, Base64.NO_WRAP));
         return Base64.encodeToString(encrypted, Base64.NO_WRAP);
     }

@@ -240,7 +240,7 @@ public class Aes extends ReactContextBaseJavaModule {
         Cipher cipher = Cipher.getInstance(algorithm);
         cipher.init(Cipher.DECRYPT_MODE, secretKey, hexIv == null ? emptyIvSpec : new IvParameterSpec(Hex.decode(hexIv)));
         byte[] decrypted = cipher.doFinal(Base64.decode(ciphertext, Base64.NO_WRAP));
-        return new String(decrypted, "UTF-8");
+        return Base64.encodeToString(decrypted, Base64.NO_WRAP);
     }

 }
